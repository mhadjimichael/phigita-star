
# Note that the meta "::typesys::lang::struct" command
# is only used to define the new "struct" command,
# which follows the unfolding of the nested ("nest")
# calls dictated by "::typesys::lang::struct".
#
# ::typesys::lang::struct struct { ... }

struct struct {
    varchar nsp
    varchar name
    varchar pk
    bool is_final_if_no_scope
    # list<typedecl> slot = {}
    # multiple typedecl slot = {}
    multiple typedecl slot = {}
}

struct typedecl {
    varchar name
    varchar type
    varchar default_value = ""
    bool optional_p = false
}

struct email -pk address {
    varchar name = ""
    varchar address
}

struct file {
    varchar name
    varchar mime_type
    int32 size
}

struct folder {
    varchar name
    int32 num_items
}

struct category {
    varchar category_name
    varchar parent_category
}

struct message {

    # typeinst section
    pk "message_id"
    is_final_if_no_scope "yes"

    slot {
        name "message_id"
        type "varint"
    }

    slot {
        name "device"
        type "varchar"
        default_value "sms"
    }

    slot {
        name "num_comments"
        type "int16"
        default_value 0
    }

    # typedecl section
 
    varint message_id

    varchar device = "sms"

    int16 num_comments = 0

    varchar subject

    varchar body

    email from

    # embedded object
    # struct -name from {
    #     varchar name = ""
    #     varchar email
    # }

    multiple email to
    multiple email cc = {}
    multiple email bcc = {}

    bool public_p = false

    multiple category categories = {}
    multiple folder folders = {}
    multiple varchar tags = {}
    multiple file attachment = {}

    map<varchar,i32> wordcount

    #extends -ref content.Object
    #extends -ref content.Content
    #extends -ref auditing.Auditing -hi world

    #index -attr public_p -abc 123

}

typeinst message msg1 {

    typeinst varchar subject = "hello"

    typeinst email from {
        typeinst varchar name = "zena wow"
        typeinst varchar address = "zena@example.com"
    }

    typeinst varchar body = "this is a test"

}

message msg2 {
    varchar subject = "hello"
    email from {
        varchar name = "zena wow"
        varchar address = "zena@example.com"
    }
    varchar body = "this is a test"
}

# CORRECT
message msg3 {
    message.subject "hello"
    message.from {
        email.name "zena wow"
        email.address "zena@example.com"
    }
    message.to {
        email.name "paris love"
        email.address "bff@example.com"
    }
    message.body = "this is a test"
    message.cc { 
        name "jane awesome"
        address "jane@example.com"
    }
    message.cc { 
        name "someone great" 
        address "someone@example.com" 
    }
    multiple message.bcc {{
        name "vera cool"
        email "vera@example.com"
    } {
        name "greg wise"
        email "greg@example.com"
    } {
        name "max loyal"
        email "max@example.com"
    }}
}

# CORRECT
message msg4 {
    subject "hello"
    from {
        name "zena wow"
        address "zena@example.com"
    }
    body "this is a test"
    to {
        name "paris love"
        address "bff@example.com"
    }
    cc { 
        name "jane awesome"
        address "jane@example.com"
    }
    cc { 
        name "someone great" 
        address "someone@example.com" 
    }
    multiple bcc {{
        name "vera cool"
        email "vera@example.com"
    } {
        name "greg wise"
        email "greg@example.com"
    } {
        name "max loyal"
        email "max@example.com"
    }}
}

#message msg5 -subject "hello" -body "this is a test" {
#    email from -name "zena wow" -address "zena@example.com"
#}

#db_insert -scope {user} -what msg1
