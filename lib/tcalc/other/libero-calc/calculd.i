/*---------------------------------------------------------------------------*
 *  calculd.i - LIBERO dialog interpreter for calcul.cpp.                    *
 *  Generated by LIBERO 2.11 on 28 May, 1996, 22:16.                         *
 *---------------------------------------------------------------------------*/

    //- Static areas --------------------------------------------------------

    static word _LR_nextst [][11] = {
        { 0,0,0,0,0,0,1,0,0,0,0 },
        { 0,0,0,1,1,2,0,0,0,0,2 },
        { 2,0,0,0,0,0,0,1,0,2,0 },
        { 3,0,3,3,3,3,0,3,3,3,3 }
    };

    static word _LR_action [][11] = {
        { 0,2,0,0,0,0,1,0,0,0,0 },
        { 0,0,0,5,5,4,0,0,0,0,3 },
        { 7,0,0,0,0,0,0,6,0,8,0 },
        { 10,0,2,9,9,9,0,9,9,9,9 }
    };

    static word _LR_vector [][3 + 1] = {
        {0},
        {0,_LR_STOP},
        {6,_LR_STOP},
        {5,0,_LR_STOP},
        {3,0,_LR_STOP},
        {4,0,_LR_STOP},
        {8,4,0,_LR_STOP},
        {7,9,6,_LR_STOP},
        {7,10,0,_LR_STOP},
        {1,6,_LR_STOP},
        {2,6,_LR_STOP}
    };

    static classfunc _LR_module [] = {
        &Ccalcul::get_next_token,
        &Ccalcul::signal_invalid_token,
        &Ccalcul::signal_token_missing,
        &Ccalcul::stack_the_number,
        &Ccalcul::stack_the_operator,
        &Ccalcul::stack_the_string,
        &Ccalcul::terminate_the_program,
        &Ccalcul::unstack_all_operators,
        &Ccalcul::unstack_ge_operators,
        &Ccalcul::unstack_if_end_mark,
        &Ccalcul::unstack_if_left_par
    };


    //- Dialog interpreter starts here --------------------------------------

    _LR_state = 0;                      //  First state is always zero
    initialise_the_program ();
    while (the_next_event != terminate_event)
      {
        _LR_event = the_next_event;
        if (_LR_event >= 11 || _LR_event < 0)
          {
            cout << "State "  << _LR_state << " - event ";
            cout << _LR_event << " is out of range" << endl;
            break;
          }
        _LR_savest = _LR_state;
        _LR_index  = _LR_action [_LR_state][_LR_event];
        //  If no action for this event, try the defaults state
        if (_LR_index == 0)
          {
            _LR_state = _LR_defaults_state;
            _LR_index = _LR_action [_LR_state][_LR_event];
          }
        if (_LR_index == 0)
          {
            cout << "State "  << _LR_state << " - event ";
            cout << _LR_event << " is not accepted" << endl;
            break;
          }
        the_next_event          = _LR_NULL_EVENT;
        the_exception_event     = _LR_NULL_EVENT;
        exception_raised        = FALSE;
        _LR_vecptr = _LR_vector [_LR_index];

        FOREVER
          {
            if ((*_LR_vecptr == _LR_STOP)
            || (exception_raised))
                break;
            (this->*_LR_module [*_LR_vecptr++]) ();
          }
        if (exception_raised)
          {
            if (the_exception_event != _LR_NULL_EVENT)
                _LR_event = the_exception_event;
            the_next_event = _LR_event;
          }
        else
            _LR_state = _LR_nextst [_LR_state][_LR_event];

        if (_LR_state == _LR_defaults_state)
            _LR_state = _LR_savest;
        if (the_next_event == _LR_NULL_EVENT)
          {
            this-> get_external_event ();
            if (the_next_event == _LR_NULL_EVENT)
              {
                cout << "No event set after event " << _LR_event;
                cout << " in state " << _LR_state << endl;
                break;
              }
          }
      }
    return (feedback);
}

//- Standard dialog routines ------------------------------------------------

void Ccalcul::raise_exception (t_event event)
{
    exception_raised = TRUE;
    if (event >= 0)
        the_exception_event = event;
