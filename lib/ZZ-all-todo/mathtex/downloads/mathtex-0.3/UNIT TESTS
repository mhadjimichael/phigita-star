UNIT/REGRESSION TESTS
=====================

  INTRODUCTION & TESTING METHODOLOGY

  Mathtex comes with its own built-in unit testing tool.  Written in
  Python it can be found in the tests/ directory.  It is designed to be
  run after mathtex is installed on the system, not before. It can be
  run like so:

    $ python tests.py

  This may take a couple of minutes to complete.

  As of 0.1 there are around 40 test sequences.  Each one of these
  sequences is run at several different sizes with different font sets.
  This is important as many subtle bugs are resolution dependent.  The
  tool then compares the output mathtex to the reference data.

  Two different comparisons are performed: the first one compares the
  locations of glyphs and lines to the reference data while the second
  compares hashes of the bitmaps produced by the Image backend. The
  reason for this is because mathtex is sensitive to the version of
  FreeType installed on the system. Different versions produce different
  output and return different font metrics to each other.

  This makes an `exact' comparison difficult.  As a result the first
  test has a tolerance associated with it.  This should be sufficient
  account for differences in FreeType versions.  The second test is
  much less forgiving, but arguably equally less useful.

  Test failure is not necessarily a problem; so long as the output is
  `correct'.  This can only be judged by looking at the images
  generated by the tool -- which are stored in the tests/ directory.
  Reference images i.e, those used to produce the database can be
  found at: http://freddie.witherden.org/drop/mathtex .

  WORKING WITH TESTS

  Those wanting to develop/enhance mathtex should consider updating
  the reference database so that your systems renderings are taken as
  the reference.  This can be done like so:

    $ python tests.py -u

  Since running all possible tests takes a considerable amount of time
  the tool allows only a subset of tests to be run. This can be done
  like so:

    $ python tests.py -l # List available tests
    $ python tests.py -L # List available font sizes/DPIs/fonts

  For example:

    $ python tests.py -t 17,18,19 -T 0,1

  will run tests 17, 18 and 19 using combinations 0 and 1.

  FUTURE WORK

  Future plans for the testing tool include:

  * integration with standard Python testing frameworks;
  * ability to 'clean' the tests directory;
  * fuzzy comparison for images -- although this is _not_ a substitute
    for human inspection;
  * fewer, more specific, tests to make it easier to analyze changes.