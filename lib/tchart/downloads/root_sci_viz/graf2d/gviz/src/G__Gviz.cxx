//
// File generated by core/utils/src/rootcint_tmp at Sat Jan 22 22:28:55 2011

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME graf2ddIgvizdIsrcdIG__Gviz
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "G__Gviz.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void TGraphNode_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TGraphNode(void *p = 0);
   static void *newArray_TGraphNode(Long_t size, void *p);
   static void delete_TGraphNode(void *p);
   static void deleteArray_TGraphNode(void *p);
   static void destruct_TGraphNode(void *p);
   static void streamer_TGraphNode(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TGraphNode*)
   {
      ::TGraphNode *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TGraphNode >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TGraphNode", ::TGraphNode::Class_Version(), "include/TGraphNode.h", 44,
                  typeid(::TGraphNode), DefineBehavior(ptr, ptr),
                  &::TGraphNode::Dictionary, isa_proxy, 1,
                  sizeof(::TGraphNode) );
      instance.SetNew(&new_TGraphNode);
      instance.SetNewArray(&newArray_TGraphNode);
      instance.SetDelete(&delete_TGraphNode);
      instance.SetDeleteArray(&deleteArray_TGraphNode);
      instance.SetDestructor(&destruct_TGraphNode);
      instance.SetStreamerFunc(&streamer_TGraphNode);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TGraphNode*)
   {
      return GenerateInitInstanceLocal((::TGraphNode*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TGraphNode*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TGraphEdge_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TGraphEdge(void *p = 0);
   static void *newArray_TGraphEdge(Long_t size, void *p);
   static void delete_TGraphEdge(void *p);
   static void deleteArray_TGraphEdge(void *p);
   static void destruct_TGraphEdge(void *p);
   static void streamer_TGraphEdge(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TGraphEdge*)
   {
      ::TGraphEdge *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TGraphEdge >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TGraphEdge", ::TGraphEdge::Class_Version(), "include/TGraphEdge.h", 36,
                  typeid(::TGraphEdge), DefineBehavior(ptr, ptr),
                  &::TGraphEdge::Dictionary, isa_proxy, 1,
                  sizeof(::TGraphEdge) );
      instance.SetNew(&new_TGraphEdge);
      instance.SetNewArray(&newArray_TGraphEdge);
      instance.SetDelete(&delete_TGraphEdge);
      instance.SetDeleteArray(&deleteArray_TGraphEdge);
      instance.SetDestructor(&destruct_TGraphEdge);
      instance.SetStreamerFunc(&streamer_TGraphEdge);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TGraphEdge*)
   {
      return GenerateInitInstanceLocal((::TGraphEdge*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TGraphEdge*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TGraphStruct_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TGraphStruct(void *p = 0);
   static void *newArray_TGraphStruct(Long_t size, void *p);
   static void delete_TGraphStruct(void *p);
   static void deleteArray_TGraphStruct(void *p);
   static void destruct_TGraphStruct(void *p);
   static void streamer_TGraphStruct(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TGraphStruct*)
   {
      ::TGraphStruct *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TGraphStruct >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TGraphStruct", ::TGraphStruct::Class_Version(), "include/TGraphStruct.h", 40,
                  typeid(::TGraphStruct), DefineBehavior(ptr, ptr),
                  &::TGraphStruct::Dictionary, isa_proxy, 1,
                  sizeof(::TGraphStruct) );
      instance.SetNew(&new_TGraphStruct);
      instance.SetNewArray(&newArray_TGraphStruct);
      instance.SetDelete(&delete_TGraphStruct);
      instance.SetDeleteArray(&deleteArray_TGraphStruct);
      instance.SetDestructor(&destruct_TGraphStruct);
      instance.SetStreamerFunc(&streamer_TGraphStruct);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TGraphStruct*)
   {
      return GenerateInitInstanceLocal((::TGraphStruct*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TGraphStruct*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *TGraphNode::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TGraphNode::Class_Name()
{
   return "TGraphNode";
}

//______________________________________________________________________________
const char *TGraphNode::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TGraphNode*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TGraphNode::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TGraphNode*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TGraphNode::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TGraphNode*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TGraphNode::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TGraphNode*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TGraphEdge::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TGraphEdge::Class_Name()
{
   return "TGraphEdge";
}

//______________________________________________________________________________
const char *TGraphEdge::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TGraphEdge*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TGraphEdge::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TGraphEdge*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TGraphEdge::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TGraphEdge*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TGraphEdge::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TGraphEdge*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TGraphStruct::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TGraphStruct::Class_Name()
{
   return "TGraphStruct";
}

//______________________________________________________________________________
const char *TGraphStruct::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TGraphStruct*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TGraphStruct::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TGraphStruct*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TGraphStruct::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TGraphStruct*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TGraphStruct::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TGraphStruct*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void TGraphStruct::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TGraphStruct.
      TClass *R__cl = ::TGraphStruct::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGVGraph", &fGVGraph);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGVC", &fGVC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fNodes", &fNodes);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEdges", &fEdges);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMargin", &fMargin);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TGraphStruct(void *p) {
      return  p ? new(p) ::TGraphStruct : new ::TGraphStruct;
   }
   static void *newArray_TGraphStruct(Long_t nElements, void *p) {
      return p ? new(p) ::TGraphStruct[nElements] : new ::TGraphStruct[nElements];
   }
   // Wrapper around operator delete
   static void delete_TGraphStruct(void *p) {
      delete ((::TGraphStruct*)p);
   }
   static void deleteArray_TGraphStruct(void *p) {
      delete [] ((::TGraphStruct*)p);
   }
   static void destruct_TGraphStruct(void *p) {
      typedef ::TGraphStruct current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_TGraphStruct(TBuffer &buf, void *obj) {
      ((::TGraphStruct*)obj)->::TGraphStruct::Streamer(buf);
   }
} // end of namespace ROOT for class ::TGraphStruct

//______________________________________________________________________________
void TGraphNode::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TGraphNode.
      TClass *R__cl = ::TGraphNode::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGVNode", &fGVNode);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fX", &fX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fY", &fY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fH", &fH);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fW", &fW);
      TNamed::ShowMembers(R__insp);
      TAttText::ShowMembers(R__insp);
      TAttFill::ShowMembers(R__insp);
      TAttLine::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TGraphNode(void *p) {
      return  p ? new(p) ::TGraphNode : new ::TGraphNode;
   }
   static void *newArray_TGraphNode(Long_t nElements, void *p) {
      return p ? new(p) ::TGraphNode[nElements] : new ::TGraphNode[nElements];
   }
   // Wrapper around operator delete
   static void delete_TGraphNode(void *p) {
      delete ((::TGraphNode*)p);
   }
   static void deleteArray_TGraphNode(void *p) {
      delete [] ((::TGraphNode*)p);
   }
   static void destruct_TGraphNode(void *p) {
      typedef ::TGraphNode current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_TGraphNode(TBuffer &buf, void *obj) {
      ((::TGraphNode*)obj)->::TGraphNode::Streamer(buf);
   }
} // end of namespace ROOT for class ::TGraphNode

//______________________________________________________________________________
void TGraphEdge::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TGraphEdge.
      TClass *R__cl = ::TGraphEdge::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fNode1", &fNode1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fNode2", &fNode2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGVEdge", &fGVEdge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fX", &fX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fY", &fY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fN", &fN);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fArrX", &fArrX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fArrY", &fArrY);
      TObject::ShowMembers(R__insp);
      TAttLine::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TGraphEdge(void *p) {
      return  p ? new(p) ::TGraphEdge : new ::TGraphEdge;
   }
   static void *newArray_TGraphEdge(Long_t nElements, void *p) {
      return p ? new(p) ::TGraphEdge[nElements] : new ::TGraphEdge[nElements];
   }
   // Wrapper around operator delete
   static void delete_TGraphEdge(void *p) {
      delete ((::TGraphEdge*)p);
   }
   static void deleteArray_TGraphEdge(void *p) {
      delete [] ((::TGraphEdge*)p);
   }
   static void destruct_TGraphEdge(void *p) {
      typedef ::TGraphEdge current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_TGraphEdge(TBuffer &buf, void *obj) {
      ((::TGraphEdge*)obj)->::TGraphEdge::Streamer(buf);
   }
} // end of namespace ROOT for class ::TGraphEdge

/********************************************************
* graf2d/gviz/src/G__Gviz.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableG__Gviz();

extern "C" void G__set_cpp_environmentG__Gviz() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("TGraphEdge.h");
  G__add_compiledheader("TGraphNode.h");
  G__add_compiledheader("TGraphStruct.h");
  G__cpp_reset_tagtableG__Gviz();
}
#include <new>
extern "C" int G__cpp_dllrevG__Gviz() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* TGraphNode */
static int G__G__Gviz_103_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TGraphNode* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TGraphNode[n];
     } else {
       p = new((void*) gvp) TGraphNode[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TGraphNode;
     } else {
       p = new((void*) gvp) TGraphNode;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__GvizLN_TGraphNode));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Gviz_103_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TGraphNode* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TGraphNode((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) TGraphNode((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TGraphNode((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) TGraphNode((const char*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__GvizLN_TGraphNode));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Gviz_103_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TGraphNode*) G__getstructoffset())->CreateGVNode((Agraph_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Gviz_103_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TGraphNode*) G__getstructoffset())->SetGVNode((Agnode_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Gviz_103_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TGraphNode*) G__getstructoffset())->GetGVNode());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Gviz_103_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TGraphNode*) G__getstructoffset())->Layout();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Gviz_103_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TGraphNode*) G__getstructoffset())->SaveAttributes(*(ostream*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Gviz_103_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TGraphNode::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Gviz_103_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TGraphNode::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Gviz_103_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TGraphNode::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Gviz_103_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TGraphNode::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Gviz_103_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TGraphNode*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Gviz_103_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TGraphNode::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Gviz_103_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TGraphNode::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Gviz_103_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TGraphNode::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Gviz_103_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TGraphNode::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__Gviz_103_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TGraphNode* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TGraphNode(*(TGraphNode*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__GvizLN_TGraphNode));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TGraphNode G__TTGraphNode;
static int G__G__Gviz_103_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TGraphNode*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TGraphNode*) (soff+(sizeof(TGraphNode)*i)))->~G__TTGraphNode();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TGraphNode*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TGraphNode*) (soff))->~G__TTGraphNode();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__Gviz_103_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TGraphNode* dest = (TGraphNode*) G__getstructoffset();
   *dest = *(TGraphNode*) libp->para[0].ref;
   const TGraphNode& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TGraphEdge */
static int G__G__Gviz_104_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TGraphEdge* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TGraphEdge[n];
     } else {
       p = new((void*) gvp) TGraphEdge[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TGraphEdge;
     } else {
       p = new((void*) gvp) TGraphEdge;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__GvizLN_TGraphEdge));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Gviz_104_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TGraphEdge* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TGraphEdge((TGraphNode*) G__int(libp->para[0]), (TGraphNode*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) TGraphEdge((TGraphNode*) G__int(libp->para[0]), (TGraphNode*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__GvizLN_TGraphEdge));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Gviz_104_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TGraphEdge*) G__getstructoffset())->CreateGVEdge((Agraph_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Gviz_104_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TGraphEdge*) G__getstructoffset())->SetGVEdge((Agedge_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Gviz_104_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TGraphEdge*) G__getstructoffset())->GetGVEdge());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Gviz_104_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TGraphEdge*) G__getstructoffset())->GetNode1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Gviz_104_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TGraphEdge*) G__getstructoffset())->GetNode2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Gviz_104_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TGraphEdge*) G__getstructoffset())->Layout();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Gviz_104_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TGraphEdge*) G__getstructoffset())->SaveAttributes(*(ostream*) libp->para[0].ref, (const char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Gviz_104_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TGraphEdge::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Gviz_104_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TGraphEdge::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Gviz_104_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TGraphEdge::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Gviz_104_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TGraphEdge::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Gviz_104_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TGraphEdge*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Gviz_104_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TGraphEdge::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Gviz_104_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TGraphEdge::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Gviz_104_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TGraphEdge::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Gviz_104_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TGraphEdge::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__Gviz_104_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TGraphEdge* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TGraphEdge(*(TGraphEdge*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__GvizLN_TGraphEdge));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TGraphEdge G__TTGraphEdge;
static int G__G__Gviz_104_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TGraphEdge*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TGraphEdge*) (soff+(sizeof(TGraphEdge)*i)))->~G__TTGraphEdge();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TGraphEdge*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TGraphEdge*) (soff))->~G__TTGraphEdge();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__Gviz_104_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TGraphEdge* dest = (TGraphEdge*) G__getstructoffset();
   *dest = *(TGraphEdge*) libp->para[0].ref;
   const TGraphEdge& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TGraphStruct */
static int G__G__Gviz_130_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TGraphStruct* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TGraphStruct[n];
     } else {
       p = new((void*) gvp) TGraphStruct[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TGraphStruct;
     } else {
       p = new((void*) gvp) TGraphStruct;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__GvizLN_TGraphStruct));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Gviz_130_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TGraphStruct*) G__getstructoffset())->AddEdge((TGraphEdge*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Gviz_130_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TGraphStruct*) G__getstructoffset())->AddNode((TGraphNode*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Gviz_130_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TGraphStruct*) G__getstructoffset())->AddEdge((TGraphNode*) G__int(libp->para[0]), (TGraphNode*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Gviz_130_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) ((TGraphStruct*) G__getstructoffset())->AddNode((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((TGraphStruct*) G__getstructoffset())->AddNode((const char*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Gviz_130_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TGraphStruct*) G__getstructoffset())->DumpAsDotFile((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Gviz_130_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TGraphStruct*) G__getstructoffset())->GetListOfNodes());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Gviz_130_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TGraphStruct*) G__getstructoffset())->GetListOfEdges());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Gviz_130_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TGraphStruct*) G__getstructoffset())->Layout());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Gviz_130_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((TGraphStruct*) G__getstructoffset())->SetMargin((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((TGraphStruct*) G__getstructoffset())->SetMargin();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Gviz_130_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TGraphStruct::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Gviz_130_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TGraphStruct::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Gviz_130_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TGraphStruct::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Gviz_130_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TGraphStruct::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Gviz_130_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TGraphStruct*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Gviz_130_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TGraphStruct::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Gviz_130_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TGraphStruct::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Gviz_130_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TGraphStruct::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Gviz_130_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TGraphStruct::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__Gviz_130_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TGraphStruct* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TGraphStruct(*(TGraphStruct*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__GvizLN_TGraphStruct));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TGraphStruct G__TTGraphStruct;
static int G__G__Gviz_130_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TGraphStruct*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TGraphStruct*) (soff+(sizeof(TGraphStruct)*i)))->~G__TTGraphStruct();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TGraphStruct*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TGraphStruct*) (soff))->~G__TTGraphStruct();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__Gviz_130_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TGraphStruct* dest = (TGraphStruct*) G__getstructoffset();
   *dest = *(TGraphStruct*) libp->para[0].ref;
   const TGraphStruct& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* TGraphNode */

/* TGraphEdge */

/* TGraphStruct */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncG__Gviz {
 public:
  G__Sizep2memfuncG__Gviz(): p(&G__Sizep2memfuncG__Gviz::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncG__Gviz::*p)();
};

size_t G__get_sizep2memfuncG__Gviz()
{
  G__Sizep2memfuncG__Gviz a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceG__Gviz() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__GvizLN_TGraphNode))) {
     TGraphNode *G__Lderived;
     G__Lderived=(TGraphNode*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GvizLN_TGraphNode),G__get_linked_tagnum(&G__G__GvizLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GvizLN_TGraphNode),G__get_linked_tagnum(&G__G__GvizLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttText *G__Lpbase=(TAttText*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GvizLN_TGraphNode),G__get_linked_tagnum(&G__G__GvizLN_TAttText),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TAttFill *G__Lpbase=(TAttFill*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GvizLN_TGraphNode),G__get_linked_tagnum(&G__G__GvizLN_TAttFill),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TAttLine *G__Lpbase=(TAttLine*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GvizLN_TGraphNode),G__get_linked_tagnum(&G__G__GvizLN_TAttLine),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__GvizLN_TGraphEdge))) {
     TGraphEdge *G__Lderived;
     G__Lderived=(TGraphEdge*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GvizLN_TGraphEdge),G__get_linked_tagnum(&G__G__GvizLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TAttLine *G__Lpbase=(TAttLine*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GvizLN_TGraphEdge),G__get_linked_tagnum(&G__G__GvizLN_TAttLine),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__GvizLN_TGraphStruct))) {
     TGraphStruct *G__Lderived;
     G__Lderived=(TGraphStruct*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GvizLN_TGraphStruct),G__get_linked_tagnum(&G__G__GvizLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableG__Gviz() {

   /* Setting up typedef entry */
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__G__GvizLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__GvizLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__GvizLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__GvizLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__GvizLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__G__GvizLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__GvizLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__GvizLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__GvizLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__GvizLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__G__GvizLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__G__GvizLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__G__GvizLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__G__GvizLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* TGraphNode */
static void G__setup_memvarTGraphNode(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__GvizLN_TGraphNode));
   { TGraphNode *p; p=(TGraphNode*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__GvizLN_Agnode_t),-1,-1,2,"fGVNode=",0,"Graphviz node");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fX=",0,"Node's center X coordinate");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fY=",0,"Node's center Y coordinate");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fH=",0,"Node height");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fW=",0,"Node width");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__GvizLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TGraphEdge */
static void G__setup_memvarTGraphEdge(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__GvizLN_TGraphEdge));
   { TGraphEdge *p; p=(TGraphEdge*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__GvizLN_TGraphNode),-1,-1,2,"fNode1=",0,"First node");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__GvizLN_TGraphNode),-1,-1,2,"fNode2=",0,"Second node");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__GvizLN_Agedge_t),-1,-1,2,"fGVEdge=",0,"Graphviz edge");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fX=",0,"X edge points (GV)");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fY=",0,"X edge points (GV)");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"fN=",0,"number of edge points (GV)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fArrX=",0,"Arrow X position");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fArrY=",0,"Arrow Y position");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__GvizLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TGraphStruct */
static void G__setup_memvarTGraphStruct(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__GvizLN_TGraphStruct));
   { TGraphStruct *p; p=(TGraphStruct*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__GvizLN_Agraph_t),-1,-1,2,"fGVGraph=",0,"Graphviz graph");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__GvizLN_GVC_s),-1,-1,2,"fGVC=",0,"Graphviz context");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__GvizLN_TList),-1,-1,2,"fNodes=",0,"List of nodes in this TGraphStruct");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__GvizLN_TList),-1,-1,2,"fEdges=",0,"List of edges in this TGraphStruct");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fMargin=",0,"Margin around the graph (in dots)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__GvizLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarG__Gviz() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncTGraphNode(void) {
   /* TGraphNode */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__GvizLN_TGraphNode));
   G__memfunc_setup("TGraphNode",972,G__G__Gviz_103_0_1, 105, G__get_linked_tagnum(&G__G__GvizLN_TGraphNode), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TGraphNode",972,G__G__Gviz_103_0_2, 105, G__get_linked_tagnum(&G__G__GvizLN_TGraphNode), -1, 0, 2, 1, 1, 0, 
"C - - 10 - name C - - 10 '\"\"' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CreateGVNode",1143,G__G__Gviz_103_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "U 'Agraph_t' - 0 - gv", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DistancetoPrimitive",1991,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - px i - 'Int_t' 0 - py", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ExecuteEvent",1237,(G__InterfaceMethod) NULL,121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - event i - 'Int_t' 0 - px "
"i - 'Int_t' 0 - py", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetGVNode",847,G__G__Gviz_103_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "U 'Agnode_t' - 0 - gvn", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTextAngle",1208,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetGVNode",835,G__G__Gviz_103_0_8, 85, G__get_linked_tagnum(&G__G__GvizLN_Agnode_t), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Layout",638,G__G__Gviz_103_0_9, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Paint",508,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SavePrimitive",1352,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - - C - 'Option_t' 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SaveAttributes",1462,G__G__Gviz_103_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__Gviz_103_0_13, 85, G__get_linked_tagnum(&G__G__GvizLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TGraphNode::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__Gviz_103_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TGraphNode::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__Gviz_103_0_15, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TGraphNode::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__Gviz_103_0_16, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TGraphNode::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__GvizLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Gviz_103_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__Gviz_103_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TGraphNode::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Gviz_103_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TGraphNode::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__Gviz_103_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TGraphNode::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Gviz_103_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TGraphNode::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TGraphNode", 972, G__G__Gviz_103_0_25, (int) ('i'), G__get_linked_tagnum(&G__G__GvizLN_TGraphNode), -1, 0, 1, 1, 1, 0, "u 'TGraphNode' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TGraphNode", 1098, G__G__Gviz_103_0_26, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__Gviz_103_0_27, (int) ('u'), G__get_linked_tagnum(&G__G__GvizLN_TGraphNode), -1, 1, 1, 1, 1, 0, "u 'TGraphNode' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTGraphEdge(void) {
   /* TGraphEdge */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__GvizLN_TGraphEdge));
   G__memfunc_setup("TGraphEdge",955,G__G__Gviz_104_0_1, 105, G__get_linked_tagnum(&G__G__GvizLN_TGraphEdge), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TGraphEdge",955,G__G__Gviz_104_0_2, 105, G__get_linked_tagnum(&G__G__GvizLN_TGraphEdge), -1, 0, 2, 1, 1, 0, 
"U 'TGraphNode' - 0 - n1 U 'TGraphNode' - 0 - n2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CreateGVEdge",1126,G__G__Gviz_104_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "U 'Agraph_t' - 0 - gv", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DistancetoPrimitive",1991,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - px i - 'Int_t' 0 - py", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ExecuteEvent",1237,(G__InterfaceMethod) NULL,121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - event i - 'Int_t' 0 - px "
"i - 'Int_t' 0 - py", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetGVEdge",830,G__G__Gviz_104_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "U 'Agedge_t' - 0 - gve", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetGVEdge",818,G__G__Gviz_104_0_7, 85, G__get_linked_tagnum(&G__G__GvizLN_Agedge_t), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNode1",727,G__G__Gviz_104_0_8, 85, G__get_linked_tagnum(&G__G__GvizLN_TGraphNode), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNode2",728,G__G__Gviz_104_0_9, 85, G__get_linked_tagnum(&G__G__GvizLN_TGraphNode), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Layout",638,G__G__Gviz_104_0_10, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Paint",508,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SavePrimitive",1352,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - - C - 'Option_t' 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SaveAttributes",1462,G__G__Gviz_104_0_13, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - - C - - 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__Gviz_104_0_14, 85, G__get_linked_tagnum(&G__G__GvizLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TGraphEdge::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__Gviz_104_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TGraphEdge::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__Gviz_104_0_16, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TGraphEdge::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__Gviz_104_0_17, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TGraphEdge::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__GvizLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Gviz_104_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__Gviz_104_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TGraphEdge::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Gviz_104_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TGraphEdge::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__Gviz_104_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TGraphEdge::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Gviz_104_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TGraphEdge::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TGraphEdge", 955, G__G__Gviz_104_0_26, (int) ('i'), G__get_linked_tagnum(&G__G__GvizLN_TGraphEdge), -1, 0, 1, 1, 1, 0, "u 'TGraphEdge' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TGraphEdge", 1081, G__G__Gviz_104_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__Gviz_104_0_28, (int) ('u'), G__get_linked_tagnum(&G__G__GvizLN_TGraphEdge), -1, 1, 1, 1, 1, 0, "u 'TGraphEdge' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTGraphStruct(void) {
   /* TGraphStruct */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__GvizLN_TGraphStruct));
   G__memfunc_setup("TGraphStruct",1227,G__G__Gviz_130_0_1, 105, G__get_linked_tagnum(&G__G__GvizLN_TGraphStruct), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddEdge",638,G__G__Gviz_130_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TGraphEdge' - 0 - edge", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddNode",655,G__G__Gviz_130_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TGraphNode' - 0 - node", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddEdge",638,G__G__Gviz_130_0_4, 85, G__get_linked_tagnum(&G__G__GvizLN_TGraphEdge), -1, 0, 2, 1, 1, 0, 
"U 'TGraphNode' - 0 - n1 U 'TGraphNode' - 0 - n2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddNode",655,G__G__Gviz_130_0_5, 85, G__get_linked_tagnum(&G__G__GvizLN_TGraphNode), -1, 0, 2, 1, 1, 0, 
"C - - 10 - name C - - 10 '\"\"' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Draw",398,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DumpAsDotFile",1265,G__G__Gviz_130_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - filename", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetListOfNodes",1386,G__G__Gviz_130_0_8, 85, G__get_linked_tagnum(&G__G__GvizLN_TList), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetListOfEdges",1369,G__G__Gviz_130_0_9, 85, G__get_linked_tagnum(&G__G__GvizLN_TList), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Layout",638,G__G__Gviz_130_0_10, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SavePrimitive",1352,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - out C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetMargin",906,G__G__Gviz_130_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 '10' m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__Gviz_130_0_13, 85, G__get_linked_tagnum(&G__G__GvizLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TGraphStruct::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__Gviz_130_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TGraphStruct::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__Gviz_130_0_15, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TGraphStruct::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__Gviz_130_0_16, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TGraphStruct::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__GvizLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Gviz_130_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__Gviz_130_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TGraphStruct::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Gviz_130_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TGraphStruct::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__Gviz_130_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TGraphStruct::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Gviz_130_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TGraphStruct::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TGraphStruct", 1227, G__G__Gviz_130_0_25, (int) ('i'), G__get_linked_tagnum(&G__G__GvizLN_TGraphStruct), -1, 0, 1, 1, 1, 0, "u 'TGraphStruct' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TGraphStruct", 1353, G__G__Gviz_130_0_26, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__Gviz_130_0_27, (int) ('u'), G__get_linked_tagnum(&G__G__GvizLN_TGraphStruct), -1, 1, 1, 1, 1, 0, "u 'TGraphStruct' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncG__Gviz() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalG__Gviz() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcG__Gviz() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__G__GvizLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__G__GvizLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__G__GvizLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__G__GvizLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__G__GvizLN_TNamed = { "TNamed" , 99 , -1 };
G__linked_taginfo G__G__GvizLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR = { "basic_ostream<char,char_traits<char> >" , 99 , -1 };
G__linked_taginfo G__G__GvizLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__G__GvizLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__GvizLN_TList = { "TList" , 99 , -1 };
G__linked_taginfo G__G__GvizLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__G__GvizLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__GvizLN_TAttLine = { "TAttLine" , 99 , -1 };
G__linked_taginfo G__G__GvizLN_Agraph_t = { "Agraph_t" , 115 , -1 };
G__linked_taginfo G__G__GvizLN_Agedge_t = { "Agedge_t" , 115 , -1 };
G__linked_taginfo G__G__GvizLN_TGraphNode = { "TGraphNode" , 99 , -1 };
G__linked_taginfo G__G__GvizLN_TGraphEdge = { "TGraphEdge" , 99 , -1 };
G__linked_taginfo G__G__GvizLN_TAttText = { "TAttText" , 99 , -1 };
G__linked_taginfo G__G__GvizLN_TAttFill = { "TAttFill" , 99 , -1 };
G__linked_taginfo G__G__GvizLN_Agnode_t = { "Agnode_t" , 115 , -1 };
G__linked_taginfo G__G__GvizLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__G__GvizLN_GVC_s = { "GVC_s" , 115 , -1 };
G__linked_taginfo G__G__GvizLN_TGraphStruct = { "TGraphStruct" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableG__Gviz() {
  G__G__GvizLN_TClass.tagnum = -1 ;
  G__G__GvizLN_TBuffer.tagnum = -1 ;
  G__G__GvizLN_TMemberInspector.tagnum = -1 ;
  G__G__GvizLN_TObject.tagnum = -1 ;
  G__G__GvizLN_TNamed.tagnum = -1 ;
  G__G__GvizLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR.tagnum = -1 ;
  G__G__GvizLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__G__GvizLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__GvizLN_TList.tagnum = -1 ;
  G__G__GvizLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__G__GvizLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__GvizLN_TAttLine.tagnum = -1 ;
  G__G__GvizLN_Agraph_t.tagnum = -1 ;
  G__G__GvizLN_Agedge_t.tagnum = -1 ;
  G__G__GvizLN_TGraphNode.tagnum = -1 ;
  G__G__GvizLN_TGraphEdge.tagnum = -1 ;
  G__G__GvizLN_TAttText.tagnum = -1 ;
  G__G__GvizLN_TAttFill.tagnum = -1 ;
  G__G__GvizLN_Agnode_t.tagnum = -1 ;
  G__G__GvizLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__G__GvizLN_GVC_s.tagnum = -1 ;
  G__G__GvizLN_TGraphStruct.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableG__Gviz() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__G__GvizLN_TClass);
   G__get_linked_tagnum_fwd(&G__G__GvizLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__G__GvizLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__G__GvizLN_TObject);
   G__get_linked_tagnum_fwd(&G__G__GvizLN_TNamed);
   G__get_linked_tagnum_fwd(&G__G__GvizLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR);
   G__get_linked_tagnum_fwd(&G__G__GvizLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__G__GvizLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__GvizLN_TList);
   G__get_linked_tagnum_fwd(&G__G__GvizLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__GvizLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__GvizLN_TAttLine);
   G__get_linked_tagnum_fwd(&G__G__GvizLN_Agraph_t);
   G__get_linked_tagnum_fwd(&G__G__GvizLN_Agedge_t);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__GvizLN_TGraphNode),sizeof(TGraphNode),-1,128256,"Graph node class",G__setup_memvarTGraphNode,G__setup_memfuncTGraphNode);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__GvizLN_TGraphEdge),sizeof(TGraphEdge),-1,128256,"Graph edge class",G__setup_memvarTGraphEdge,G__setup_memfuncTGraphEdge);
   G__get_linked_tagnum_fwd(&G__G__GvizLN_TAttText);
   G__get_linked_tagnum_fwd(&G__G__GvizLN_TAttFill);
   G__get_linked_tagnum_fwd(&G__G__GvizLN_Agnode_t);
   G__get_linked_tagnum_fwd(&G__G__GvizLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__G__GvizLN_GVC_s);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__GvizLN_TGraphStruct),sizeof(TGraphStruct),-1,95488,"Graph structure class",G__setup_memvarTGraphStruct,G__setup_memfuncTGraphStruct);
}
extern "C" void G__cpp_setupG__Gviz(void) {
  G__check_setup_version(30051515,"G__cpp_setupG__Gviz()");
  G__set_cpp_environmentG__Gviz();
  G__cpp_setup_tagtableG__Gviz();

  G__cpp_setup_inheritanceG__Gviz();

  G__cpp_setup_typetableG__Gviz();

  G__cpp_setup_memvarG__Gviz();

  G__cpp_setup_memfuncG__Gviz();
  G__cpp_setup_globalG__Gviz();
  G__cpp_setup_funcG__Gviz();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncG__Gviz();
  return;
}
class G__cpp_setup_initG__Gviz {
  public:
    G__cpp_setup_initG__Gviz() { G__add_setup_func("G__Gviz",(G__incsetup)(&G__cpp_setupG__Gviz)); G__call_setup_funcs(); }
   ~G__cpp_setup_initG__Gviz() { G__remove_setup_func("G__Gviz"); }
};
G__cpp_setup_initG__Gviz G__cpp_setup_initializerG__Gviz;

