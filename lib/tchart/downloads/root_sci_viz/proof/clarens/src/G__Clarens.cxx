//
// File generated by core/utils/src/rootcint_tmp at Sat Jan 22 22:33:13 2011

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME proofdIclarensdIsrcdIG__Clarens
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "G__Clarens.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void TGM_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_TGM(void *p);
   static void deleteArray_TGM(void *p);
   static void destruct_TGM(void *p);
   static void streamer_TGM(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TGM*)
   {
      ::TGM *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TGM >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TGM", ::TGM::Class_Version(), "include/TGM.h", 37,
                  typeid(::TGM), DefineBehavior(ptr, ptr),
                  &::TGM::Dictionary, isa_proxy, 0,
                  sizeof(::TGM) );
      instance.SetDelete(&delete_TGM);
      instance.SetDeleteArray(&deleteArray_TGM);
      instance.SetDestructor(&destruct_TGM);
      instance.SetStreamerFunc(&streamer_TGM);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TGM*)
   {
      return GenerateInitInstanceLocal((::TGM*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TGM*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TLM_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_TLM(void *p);
   static void deleteArray_TLM(void *p);
   static void destruct_TLM(void *p);
   static void streamer_TLM(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TLM*)
   {
      ::TLM *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TLM >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TLM", ::TLM::Class_Version(), "include/TLM.h", 40,
                  typeid(::TLM), DefineBehavior(ptr, ptr),
                  &::TLM::Dictionary, isa_proxy, 0,
                  sizeof(::TLM) );
      instance.SetDelete(&delete_TLM);
      instance.SetDeleteArray(&deleteArray_TLM);
      instance.SetDestructor(&destruct_TLM);
      instance.SetStreamerFunc(&streamer_TLM);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TLM*)
   {
      return GenerateInitInstanceLocal((::TLM*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TLM*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TSAM_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_TSAM(void *p);
   static void deleteArray_TSAM(void *p);
   static void destruct_TSAM(void *p);
   static void streamer_TSAM(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TSAM*)
   {
      ::TSAM *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TSAM >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TSAM", ::TSAM::Class_Version(), "include/TSAM.h", 36,
                  typeid(::TSAM), DefineBehavior(ptr, ptr),
                  &::TSAM::Dictionary, isa_proxy, 0,
                  sizeof(::TSAM) );
      instance.SetDelete(&delete_TSAM);
      instance.SetDeleteArray(&deleteArray_TSAM);
      instance.SetDestructor(&destruct_TSAM);
      instance.SetStreamerFunc(&streamer_TSAM);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TSAM*)
   {
      return GenerateInitInstanceLocal((::TSAM*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TSAM*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TEcho_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_TEcho(void *p);
   static void deleteArray_TEcho(void *p);
   static void destruct_TEcho(void *p);
   static void streamer_TEcho(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TEcho*)
   {
      ::TEcho *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TEcho >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TEcho", ::TEcho::Class_Version(), "include/TEcho.h", 31,
                  typeid(::TEcho), DefineBehavior(ptr, ptr),
                  &::TEcho::Dictionary, isa_proxy, 0,
                  sizeof(::TEcho) );
      instance.SetDelete(&delete_TEcho);
      instance.SetDeleteArray(&deleteArray_TEcho);
      instance.SetDestructor(&destruct_TEcho);
      instance.SetStreamerFunc(&streamer_TEcho);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TEcho*)
   {
      return GenerateInitInstanceLocal((::TEcho*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TEcho*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TClSession_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_TClSession(void *p);
   static void deleteArray_TClSession(void *p);
   static void destruct_TClSession(void *p);
   static void streamer_TClSession(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TClSession*)
   {
      ::TClSession *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TClSession >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TClSession", ::TClSession::Class_Version(), "include/TClSession.h", 41,
                  typeid(::TClSession), DefineBehavior(ptr, ptr),
                  &::TClSession::Dictionary, isa_proxy, 0,
                  sizeof(::TClSession) );
      instance.SetDelete(&delete_TClSession);
      instance.SetDeleteArray(&deleteArray_TClSession);
      instance.SetDestructor(&destruct_TClSession);
      instance.SetStreamerFunc(&streamer_TClSession);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TClSession*)
   {
      return GenerateInitInstanceLocal((::TClSession*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TClSession*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TClarens_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_TClarens(void *p);
   static void deleteArray_TClarens(void *p);
   static void destruct_TClarens(void *p);
   static void streamer_TClarens(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TClarens*)
   {
      ::TClarens *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TClarens >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TClarens", ::TClarens::Class_Version(), "include/TClarens.h", 36,
                  typeid(::TClarens), DefineBehavior(ptr, ptr),
                  &::TClarens::Dictionary, isa_proxy, 0,
                  sizeof(::TClarens) );
      instance.SetDelete(&delete_TClarens);
      instance.SetDeleteArray(&deleteArray_TClarens);
      instance.SetDestructor(&destruct_TClarens);
      instance.SetStreamerFunc(&streamer_TClarens);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TClarens*)
   {
      return GenerateInitInstanceLocal((::TClarens*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TClarens*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TXmlRpc_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_TXmlRpc(void *p);
   static void deleteArray_TXmlRpc(void *p);
   static void destruct_TXmlRpc(void *p);
   static void streamer_TXmlRpc(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TXmlRpc*)
   {
      ::TXmlRpc *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TXmlRpc >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TXmlRpc", ::TXmlRpc::Class_Version(), "include/TXmlRpc.h", 39,
                  typeid(::TXmlRpc), DefineBehavior(ptr, ptr),
                  &::TXmlRpc::Dictionary, isa_proxy, 0,
                  sizeof(::TXmlRpc) );
      instance.SetDelete(&delete_TXmlRpc);
      instance.SetDeleteArray(&deleteArray_TXmlRpc);
      instance.SetDestructor(&destruct_TXmlRpc);
      instance.SetStreamerFunc(&streamer_TXmlRpc);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TXmlRpc*)
   {
      return GenerateInitInstanceLocal((::TXmlRpc*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TXmlRpc*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TClProxy_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_TClProxy(void *p);
   static void deleteArray_TClProxy(void *p);
   static void destruct_TClProxy(void *p);
   static void streamer_TClProxy(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TClProxy*)
   {
      ::TClProxy *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TClProxy >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TClProxy", ::TClProxy::Class_Version(), "include/TClProxy.h", 30,
                  typeid(::TClProxy), DefineBehavior(ptr, ptr),
                  &::TClProxy::Dictionary, isa_proxy, 0,
                  sizeof(::TClProxy) );
      instance.SetDelete(&delete_TClProxy);
      instance.SetDeleteArray(&deleteArray_TClProxy);
      instance.SetDestructor(&destruct_TClProxy);
      instance.SetStreamerFunc(&streamer_TClProxy);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TClProxy*)
   {
      return GenerateInitInstanceLocal((::TClProxy*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TClProxy*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TGMcLcLTFileParams_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_TGMcLcLTFileParams(void *p);
   static void deleteArray_TGMcLcLTFileParams(void *p);
   static void destruct_TGMcLcLTFileParams(void *p);
   static void streamer_TGMcLcLTFileParams(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TGM::TFileParams*)
   {
      ::TGM::TFileParams *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TGM::TFileParams >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TGM::TFileParams", ::TGM::TFileParams::Class_Version(), "include/TGM.h", 49,
                  typeid(::TGM::TFileParams), DefineBehavior(ptr, ptr),
                  &::TGM::TFileParams::Dictionary, isa_proxy, 0,
                  sizeof(::TGM::TFileParams) );
      instance.SetDelete(&delete_TGMcLcLTFileParams);
      instance.SetDeleteArray(&deleteArray_TGMcLcLTFileParams);
      instance.SetDestructor(&destruct_TGMcLcLTFileParams);
      instance.SetStreamerFunc(&streamer_TGMcLcLTFileParams);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TGM::TFileParams*)
   {
      return GenerateInitInstanceLocal((::TGM::TFileParams*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TGM::TFileParams*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TLMcLcLTSlaveParams_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TLMcLcLTSlaveParams(void *p = 0);
   static void *newArray_TLMcLcLTSlaveParams(Long_t size, void *p);
   static void delete_TLMcLcLTSlaveParams(void *p);
   static void deleteArray_TLMcLcLTSlaveParams(void *p);
   static void destruct_TLMcLcLTSlaveParams(void *p);
   static void streamer_TLMcLcLTSlaveParams(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TLM::TSlaveParams*)
   {
      ::TLM::TSlaveParams *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TLM::TSlaveParams >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TLM::TSlaveParams", ::TLM::TSlaveParams::Class_Version(), "include/TLM.h", 52,
                  typeid(::TLM::TSlaveParams), DefineBehavior(ptr, ptr),
                  &::TLM::TSlaveParams::Dictionary, isa_proxy, 0,
                  sizeof(::TLM::TSlaveParams) );
      instance.SetNew(&new_TLMcLcLTSlaveParams);
      instance.SetNewArray(&newArray_TLMcLcLTSlaveParams);
      instance.SetDelete(&delete_TLMcLcLTSlaveParams);
      instance.SetDeleteArray(&deleteArray_TLMcLcLTSlaveParams);
      instance.SetDestructor(&destruct_TLMcLcLTSlaveParams);
      instance.SetStreamerFunc(&streamer_TLMcLcLTSlaveParams);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TLM::TSlaveParams*)
   {
      return GenerateInitInstanceLocal((::TLM::TSlaveParams*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TLM::TSlaveParams*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *TGM::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TGM::Class_Name()
{
   return "TGM";
}

//______________________________________________________________________________
const char *TGM::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TGM*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TGM::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TGM*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TGM::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TGM*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TGM::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TGM*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TLM::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TLM::Class_Name()
{
   return "TLM";
}

//______________________________________________________________________________
const char *TLM::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TLM*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TLM::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TLM*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TLM::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TLM*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TLM::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TLM*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TSAM::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TSAM::Class_Name()
{
   return "TSAM";
}

//______________________________________________________________________________
const char *TSAM::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSAM*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TSAM::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSAM*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TSAM::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSAM*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TSAM::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSAM*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TEcho::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TEcho::Class_Name()
{
   return "TEcho";
}

//______________________________________________________________________________
const char *TEcho::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TEcho*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TEcho::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TEcho*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TEcho::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TEcho*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TEcho::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TEcho*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TClSession::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TClSession::Class_Name()
{
   return "TClSession";
}

//______________________________________________________________________________
const char *TClSession::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TClSession*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TClSession::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TClSession*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TClSession::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TClSession*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TClSession::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TClSession*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TClarens::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TClarens::Class_Name()
{
   return "TClarens";
}

//______________________________________________________________________________
const char *TClarens::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TClarens*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TClarens::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TClarens*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TClarens::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TClarens*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TClarens::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TClarens*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TXmlRpc::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TXmlRpc::Class_Name()
{
   return "TXmlRpc";
}

//______________________________________________________________________________
const char *TXmlRpc::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TXmlRpc*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TXmlRpc::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TXmlRpc*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TXmlRpc::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TXmlRpc*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TXmlRpc::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TXmlRpc*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TClProxy::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TClProxy::Class_Name()
{
   return "TClProxy";
}

//______________________________________________________________________________
const char *TClProxy::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TClProxy*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TClProxy::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TClProxy*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TClProxy::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TClProxy*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TClProxy::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TClProxy*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TGM::TFileParams::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TGM::TFileParams::Class_Name()
{
   return "TGM::TFileParams";
}

//______________________________________________________________________________
const char *TGM::TFileParams::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TGM::TFileParams*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TGM::TFileParams::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TGM::TFileParams*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TGM::TFileParams::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TGM::TFileParams*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TGM::TFileParams::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TGM::TFileParams*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TLM::TSlaveParams::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TLM::TSlaveParams::Class_Name()
{
   return "TLM::TSlaveParams";
}

//______________________________________________________________________________
const char *TLM::TSlaveParams::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TLM::TSlaveParams*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TLM::TSlaveParams::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TLM::TSlaveParams*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TLM::TSlaveParams::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TLM::TSlaveParams*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TLM::TSlaveParams::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TLM::TSlaveParams*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void TClarens::Streamer(TBuffer &R__b)
{
   // Stream an object of class TClarens.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void TClarens::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TClarens.
      TClass *R__cl = ::TClarens::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTimeout", &fTimeout);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSessions", &fSessions);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_TClarens(void *p) {
      delete ((::TClarens*)p);
   }
   static void deleteArray_TClarens(void *p) {
      delete [] ((::TClarens*)p);
   }
   static void destruct_TClarens(void *p) {
      typedef ::TClarens current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_TClarens(TBuffer &buf, void *obj) {
      ((::TClarens*)obj)->::TClarens::Streamer(buf);
   }
} // end of namespace ROOT for class ::TClarens

//______________________________________________________________________________
void TClSession::Streamer(TBuffer &R__b)
{
   // Stream an object of class TClSession.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void TClSession::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TClSession.
      TClass *R__cl = ::TClSession::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fUrl", &fUrl);
      R__insp.InspectMember(fUrl, "fUrl.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fUser", &fUser);
      R__insp.InspectMember(fUser, "fUser.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPassword", &fPassword);
      R__insp.InspectMember(fPassword, "fPassword.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fServerInfo", &fServerInfo);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fServerPubRSA", &fServerPubRSA);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_TClSession(void *p) {
      delete ((::TClSession*)p);
   }
   static void deleteArray_TClSession(void *p) {
      delete [] ((::TClSession*)p);
   }
   static void destruct_TClSession(void *p) {
      typedef ::TClSession current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_TClSession(TBuffer &buf, void *obj) {
      ((::TClSession*)obj)->::TClSession::Streamer(buf);
   }
} // end of namespace ROOT for class ::TClSession

//______________________________________________________________________________
void TClProxy::Streamer(TBuffer &R__b)
{
   // Stream an object of class TClProxy.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void TClProxy::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TClProxy.
      TClass *R__cl = ::TClProxy::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRpc", &fRpc);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_TClProxy(void *p) {
      delete ((::TClProxy*)p);
   }
   static void deleteArray_TClProxy(void *p) {
      delete [] ((::TClProxy*)p);
   }
   static void destruct_TClProxy(void *p) {
      typedef ::TClProxy current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_TClProxy(TBuffer &buf, void *obj) {
      ((::TClProxy*)obj)->::TClProxy::Streamer(buf);
   }
} // end of namespace ROOT for class ::TClProxy

//______________________________________________________________________________
void TXmlRpc::Streamer(TBuffer &R__b)
{
   // Stream an object of class TXmlRpc.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void TXmlRpc::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TXmlRpc.
      TClass *R__cl = ::TXmlRpc::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSession", &fSession);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEnv", &fEnv);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fService", &fService);
      R__insp.InspectMember(fService, "fService.");
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_TXmlRpc(void *p) {
      delete ((::TXmlRpc*)p);
   }
   static void deleteArray_TXmlRpc(void *p) {
      delete [] ((::TXmlRpc*)p);
   }
   static void destruct_TXmlRpc(void *p) {
      typedef ::TXmlRpc current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_TXmlRpc(TBuffer &buf, void *obj) {
      ((::TXmlRpc*)obj)->::TXmlRpc::Streamer(buf);
   }
} // end of namespace ROOT for class ::TXmlRpc

//______________________________________________________________________________
void TEcho::Streamer(TBuffer &R__b)
{
   // Stream an object of class TEcho.

   TClProxy::Streamer(R__b);
}

//______________________________________________________________________________
void TEcho::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TEcho.
      TClass *R__cl = ::TEcho::IsA();
      if (R__cl || R__insp.IsA()) { }
      TClProxy::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_TEcho(void *p) {
      delete ((::TEcho*)p);
   }
   static void deleteArray_TEcho(void *p) {
      delete [] ((::TEcho*)p);
   }
   static void destruct_TEcho(void *p) {
      typedef ::TEcho current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_TEcho(TBuffer &buf, void *obj) {
      ((::TEcho*)obj)->::TEcho::Streamer(buf);
   }
} // end of namespace ROOT for class ::TEcho

//______________________________________________________________________________
void TGM::Streamer(TBuffer &R__b)
{
   // Stream an object of class TGM.

   TClProxy::Streamer(R__b);
}

//______________________________________________________________________________
void TGM::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TGM.
      TClass *R__cl = ::TGM::IsA();
      if (R__cl || R__insp.IsA()) { }
      TClProxy::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_TGM(void *p) {
      delete ((::TGM*)p);
   }
   static void deleteArray_TGM(void *p) {
      delete [] ((::TGM*)p);
   }
   static void destruct_TGM(void *p) {
      typedef ::TGM current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_TGM(TBuffer &buf, void *obj) {
      ((::TGM*)obj)->::TGM::Streamer(buf);
   }
} // end of namespace ROOT for class ::TGM

//______________________________________________________________________________
void TGM::TFileParams::Streamer(TBuffer &R__b)
{
   // Stream an object of class TGM::TFileParams.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void TGM::TFileParams::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TGM::TFileParams.
      TClass *R__cl = ::TGM::TFileParams::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFileName", &fFileName);
      R__insp.InspectMember(fFileName, "fFileName.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fObjClass", &fObjClass);
      R__insp.InspectMember(fObjClass, "fObjClass.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fObjName", &fObjName);
      R__insp.InspectMember(fObjName, "fObjName.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDir", &fDir);
      R__insp.InspectMember(fDir, "fDir.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFirst", &fFirst);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNum", &fNum);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_TGMcLcLTFileParams(void *p) {
      delete ((::TGM::TFileParams*)p);
   }
   static void deleteArray_TGMcLcLTFileParams(void *p) {
      delete [] ((::TGM::TFileParams*)p);
   }
   static void destruct_TGMcLcLTFileParams(void *p) {
      typedef ::TGM::TFileParams current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_TGMcLcLTFileParams(TBuffer &buf, void *obj) {
      ((::TGM::TFileParams*)obj)->::TGM::TFileParams::Streamer(buf);
   }
} // end of namespace ROOT for class ::TGM::TFileParams

//______________________________________________________________________________
void TLM::Streamer(TBuffer &R__b)
{
   // Stream an object of class TLM.

   TClProxy::Streamer(R__b);
}

//______________________________________________________________________________
void TLM::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TLM.
      TClass *R__cl = ::TLM::IsA();
      if (R__cl || R__insp.IsA()) { }
      TClProxy::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_TLM(void *p) {
      delete ((::TLM*)p);
   }
   static void deleteArray_TLM(void *p) {
      delete [] ((::TLM*)p);
   }
   static void destruct_TLM(void *p) {
      typedef ::TLM current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_TLM(TBuffer &buf, void *obj) {
      ((::TLM*)obj)->::TLM::Streamer(buf);
   }
} // end of namespace ROOT for class ::TLM

//______________________________________________________________________________
void TLM::TSlaveParams::Streamer(TBuffer &R__b)
{
   // Stream an object of class TLM::TSlaveParams.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void TLM::TSlaveParams::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TLM::TSlaveParams.
      TClass *R__cl = ::TLM::TSlaveParams::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNode", &fNode);
      R__insp.InspectMember(fNode, "fNode.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPerfidx", &fPerfidx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fImg", &fImg);
      R__insp.InspectMember(fImg, "fImg.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAuth", &fAuth);
      R__insp.InspectMember(fAuth, "fAuth.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAccount", &fAccount);
      R__insp.InspectMember(fAccount, "fAccount.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fType", &fType);
      R__insp.InspectMember(fType, "fType.");
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TLMcLcLTSlaveParams(void *p) {
      return  p ? new(p) ::TLM::TSlaveParams : new ::TLM::TSlaveParams;
   }
   static void *newArray_TLMcLcLTSlaveParams(Long_t nElements, void *p) {
      return p ? new(p) ::TLM::TSlaveParams[nElements] : new ::TLM::TSlaveParams[nElements];
   }
   // Wrapper around operator delete
   static void delete_TLMcLcLTSlaveParams(void *p) {
      delete ((::TLM::TSlaveParams*)p);
   }
   static void deleteArray_TLMcLcLTSlaveParams(void *p) {
      delete [] ((::TLM::TSlaveParams*)p);
   }
   static void destruct_TLMcLcLTSlaveParams(void *p) {
      typedef ::TLM::TSlaveParams current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_TLMcLcLTSlaveParams(TBuffer &buf, void *obj) {
      ((::TLM::TSlaveParams*)obj)->::TLM::TSlaveParams::Streamer(buf);
   }
} // end of namespace ROOT for class ::TLM::TSlaveParams

//______________________________________________________________________________
void TSAM::Streamer(TBuffer &R__b)
{
   // Stream an object of class TSAM.

   TClProxy::Streamer(R__b);
}

//______________________________________________________________________________
void TSAM::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TSAM.
      TClass *R__cl = ::TSAM::IsA();
      if (R__cl || R__insp.IsA()) { }
      TClProxy::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_TSAM(void *p) {
      delete ((::TSAM*)p);
   }
   static void deleteArray_TSAM(void *p) {
      delete [] ((::TSAM*)p);
   }
   static void destruct_TSAM(void *p) {
      typedef ::TSAM current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_TSAM(TBuffer &buf, void *obj) {
      ((::TSAM*)obj)->::TSAM::Streamer(buf);
   }
} // end of namespace ROOT for class ::TSAM

/********************************************************
* proof/clarens/src/G__Clarens.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableG__Clarens();

extern "C" void G__set_cpp_environmentG__Clarens() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("TClarens.h");
  G__add_compiledheader("TClProxy.h");
  G__add_compiledheader("TClSession.h");
  G__add_compiledheader("TEcho.h");
  G__add_compiledheader("TGM.h");
  G__add_compiledheader("TLM.h");
  G__add_compiledheader("TSAM.h");
  G__add_compiledheader("TXmlRpc.h");
  G__cpp_reset_tagtableG__Clarens();
}
#include <new>
extern "C" int G__cpp_dllrevG__Clarens() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* TGM */
static int G__G__Clarens_99_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TGM* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TGM((TXmlRpc*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) TGM((TXmlRpc*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ClarensLN_TGM));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_99_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((TGM*) G__getstructoffset())->GetVersion(*(TString*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_99_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((TGM*) G__getstructoffset())->CreateSession((const Char_t*) G__int(libp->para[0]), *(TString*) libp->para[1].ref
, libp->para[2].ref ? *(TList**) libp->para[2].ref : *(TList**) (void*) (&G__Mlong(libp->para[2])), *(TUrl*) libp->para[3].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_99_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((TGM*) G__getstructoffset())->DestroySession((const Char_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_99_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TGM::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_99_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TGM::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_99_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TGM::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_99_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TGM::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_99_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TGM*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_99_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TGM::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_99_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TGM::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_99_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TGM::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_99_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TGM::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__Clarens_99_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TGM* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TGM(*(TGM*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ClarensLN_TGM));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TGM G__TTGM;
static int G__G__Clarens_99_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TGM*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TGM*) (soff+(sizeof(TGM)*i)))->~G__TTGM();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TGM*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TGM*) (soff))->~G__TTGM();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__Clarens_99_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TGM* dest = (TGM*) G__getstructoffset();
   *dest = *(TGM*) libp->para[0].ref;
   const TGM& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TLM */
static int G__G__Clarens_100_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TLM* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TLM((TXmlRpc*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) TLM((TXmlRpc*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ClarensLN_TLM));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_100_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((TLM*) G__getstructoffset())->GetVersion(*(TString*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_100_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((TLM*) G__getstructoffset())->StartSession((const Char_t*) G__int(libp->para[0]), libp->para[1].ref ? *(TList**) libp->para[1].ref : *(TList**) (void*) (&G__Mlong(libp->para[1]))
, *(Int_t*) G__Intref(&libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_100_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((TLM*) G__getstructoffset())->DataReady((const Char_t*) G__int(libp->para[0]), *(Long64_t*) G__Longlongref(&libp->para[1])
, *(Long64_t*) G__Longlongref(&libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_100_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((TLM*) G__getstructoffset())->Heartbeat((const Char_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_100_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((TLM*) G__getstructoffset())->EndSession((const Char_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_100_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TLM::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_100_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TLM::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_100_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TLM::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_100_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TLM::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_100_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TLM*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_100_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TLM::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_100_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TLM::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_100_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TLM::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_100_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TLM::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__Clarens_100_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TLM* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TLM(*(TLM*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ClarensLN_TLM));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TLM G__TTLM;
static int G__G__Clarens_100_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TLM*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TLM*) (soff+(sizeof(TLM)*i)))->~G__TTLM();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TLM*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TLM*) (soff))->~G__TTLM();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__Clarens_100_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TLM* dest = (TLM*) G__getstructoffset();
   *dest = *(TLM*) libp->para[0].ref;
   const TLM& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TSAM */
static int G__G__Clarens_101_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSAM* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TSAM((TXmlRpc*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) TSAM((TXmlRpc*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ClarensLN_TSAM));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_101_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((TSAM*) G__getstructoffset())->GetVersion(*(TString*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_101_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((TSAM*) G__getstructoffset())->GetDatasets(libp->para[0].ref ? *(TList**) libp->para[0].ref : *(TList**) (void*) (&G__Mlong(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_101_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((TSAM*) G__getstructoffset())->GetDSetLocations((const Char_t*) G__int(libp->para[0]), libp->para[1].ref ? *(TList**) libp->para[1].ref : *(TList**) (void*) (&G__Mlong(libp->para[1]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_101_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((TSAM*) G__getstructoffset())->GetDSetFiles((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, libp->para[2].ref ? *(TList**) libp->para[2].ref : *(TList**) (void*) (&G__Mlong(libp->para[2]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_101_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((TSAM*) G__getstructoffset())->GetDSetSize((const Char_t*) G__int(libp->para[0]), *(Long64_t*) G__Longlongref(&libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_101_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TSAM::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_101_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSAM::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_101_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TSAM::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_101_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TSAM::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_101_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSAM*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_101_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSAM::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_101_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSAM::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_101_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSAM::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_101_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSAM::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__Clarens_101_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TSAM* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TSAM(*(TSAM*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ClarensLN_TSAM));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TSAM G__TTSAM;
static int G__G__Clarens_101_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TSAM*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TSAM*) (soff+(sizeof(TSAM)*i)))->~G__TTSAM();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TSAM*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TSAM*) (soff))->~G__TTSAM();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__Clarens_101_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSAM* dest = (TSAM*) G__getstructoffset();
   *dest = *(TSAM*) libp->para[0].ref;
   const TSAM& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TEcho */
static int G__G__Clarens_102_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TEcho* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TEcho((TXmlRpc*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) TEcho((TXmlRpc*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ClarensLN_TEcho));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_102_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((TEcho*) G__getstructoffset())->Echo((const Char_t*) G__int(libp->para[0]), *(TString*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_102_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((TEcho*) G__getstructoffset())->Hostname(*(TString*) libp->para[0].ref, *(TString*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_102_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TEcho*) G__getstructoffset())->Benchmark((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_102_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TEcho::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_102_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TEcho::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_102_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TEcho::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_102_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TEcho::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_102_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TEcho*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_102_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TEcho::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_102_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TEcho::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_102_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TEcho::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_102_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TEcho::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__Clarens_102_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TEcho* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TEcho(*(TEcho*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ClarensLN_TEcho));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TEcho G__TTEcho;
static int G__G__Clarens_102_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TEcho*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TEcho*) (soff+(sizeof(TEcho)*i)))->~G__TTEcho();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TEcho*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TEcho*) (soff))->~G__TTEcho();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__Clarens_102_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TEcho* dest = (TEcho*) G__getstructoffset();
   *dest = *(TEcho*) libp->para[0].ref;
   const TEcho& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TClSession */
static int G__G__Clarens_104_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TClSession*) G__getstructoffset())->GetServerInfo());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_104_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((TClSession*) G__getstructoffset())->GetServer());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_104_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TClSession::Create((const Char_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_104_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TClSession::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_104_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TClSession::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_104_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TClSession::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_104_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TClSession::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_104_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TClSession*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_104_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TClSession::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_104_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TClSession::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_104_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TClSession::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_104_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TClSession::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__Clarens_104_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TClSession* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TClSession(*(TClSession*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ClarensLN_TClSession));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TClSession G__TTClSession;
static int G__G__Clarens_104_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TClSession*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TClSession*) (soff+(sizeof(TClSession)*i)))->~G__TTClSession();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TClSession*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TClSession*) (soff))->~G__TTClSession();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__Clarens_104_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TClSession* dest = (TClSession*) G__getstructoffset();
   *dest = *(TClSession*) libp->para[0].ref;
   const TClSession& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TClarens */
static int G__G__Clarens_105_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TClarens*) G__getstructoffset())->SetTimeout((Long_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_105_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TClarens*) G__getstructoffset())->GetTimeout());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_105_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TClarens*) G__getstructoffset())->CreateEcho((const Char_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_105_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TClarens*) G__getstructoffset())->CreateGM((const Char_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_105_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TClarens*) G__getstructoffset())->CreateLM((const Char_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_105_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TClarens*) G__getstructoffset())->CreateSAM((const Char_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_105_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TClarens::Init();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_105_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TClarens::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_105_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TClarens::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_105_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TClarens::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_105_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TClarens::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_105_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TClarens*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_105_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TClarens::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_105_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TClarens::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_105_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TClarens::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_105_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TClarens::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__Clarens_105_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TClarens* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TClarens(*(TClarens*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ClarensLN_TClarens));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TClarens G__TTClarens;
static int G__G__Clarens_105_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TClarens*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TClarens*) (soff+(sizeof(TClarens)*i)))->~G__TTClarens();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TClarens*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TClarens*) (soff))->~G__TTClarens();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__Clarens_105_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TClarens* dest = (TClarens*) G__getstructoffset();
   *dest = *(TClarens*) libp->para[0].ref;
   const TClarens& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TXmlRpc */
static int G__G__Clarens_106_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TXmlRpc* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TXmlRpc((TClSession*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) TXmlRpc((TClSession*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ClarensLN_TXmlRpc));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_106_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TXmlRpc*) G__getstructoffset())->SetService((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_106_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const TXmlRpc*) G__getstructoffset())->GetService());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_106_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TXmlRpc*) G__getstructoffset())->GetEnv());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_106_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TXmlRpc*) G__getstructoffset())->GetServerInfo());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_106_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((TXmlRpc*) G__getstructoffset())->GetServer());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_106_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TXmlRpc*) G__getstructoffset())->Call((const Char_t*) G__int(libp->para[0]), (xmlrpc_value*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_106_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((TXmlRpc*) G__getstructoffset())->RpcFailed((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_106_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TXmlRpc*) G__getstructoffset())->PrintValue((xmlrpc_value*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_106_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TXmlRpc::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_106_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TXmlRpc::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_106_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TXmlRpc::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_106_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TXmlRpc::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_106_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TXmlRpc*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_106_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TXmlRpc::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_106_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TXmlRpc::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_106_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TXmlRpc::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_106_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TXmlRpc::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__Clarens_106_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TXmlRpc* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TXmlRpc(*(TXmlRpc*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ClarensLN_TXmlRpc));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TXmlRpc G__TTXmlRpc;
static int G__G__Clarens_106_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TXmlRpc*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TXmlRpc*) (soff+(sizeof(TXmlRpc)*i)))->~G__TTXmlRpc();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TXmlRpc*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TXmlRpc*) (soff))->~G__TTXmlRpc();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__Clarens_106_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TXmlRpc* dest = (TXmlRpc*) G__getstructoffset();
   *dest = *(TXmlRpc*) libp->para[0].ref;
   const TXmlRpc& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TClProxy */
static int G__G__Clarens_107_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TClProxy* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TClProxy((const Char_t*) G__int(libp->para[0]), (TXmlRpc*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) TClProxy((const Char_t*) G__int(libp->para[0]), (TXmlRpc*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ClarensLN_TClProxy));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_107_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((TClProxy*) G__getstructoffset())->RpcFailed((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_107_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TClProxy::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_107_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TClProxy::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_107_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TClProxy::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_107_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TClProxy::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_107_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TClProxy*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_107_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TClProxy::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_107_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TClProxy::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_107_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TClProxy::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_107_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TClProxy::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__Clarens_107_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TClProxy* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TClProxy(*(TClProxy*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ClarensLN_TClProxy));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TClProxy G__TTClProxy;
static int G__G__Clarens_107_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TClProxy*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TClProxy*) (soff+(sizeof(TClProxy)*i)))->~G__TTClProxy();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TClProxy*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TClProxy*) (soff))->~G__TTClProxy();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__Clarens_107_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TClProxy* dest = (TClProxy*) G__getstructoffset();
   *dest = *(TClProxy*) libp->para[0].ref;
   const TClProxy& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TGM::TFileParams */
static int G__G__Clarens_135_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TGM::TFileParams* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 6
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TGM::TFileParams(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (const Char_t*) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5]));
   } else {
     p = new((void*) gvp) TGM::TFileParams(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (const Char_t*) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ClarensLN_TGMcLcLTFileParams));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_135_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TGM::TFileParams::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_135_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TGM::TFileParams::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_135_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TGM::TFileParams::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_135_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TGM::TFileParams::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_135_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TGM::TFileParams*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_135_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TGM::TFileParams::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_135_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TGM::TFileParams::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_135_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TGM::TFileParams::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_135_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TGM::TFileParams::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__Clarens_135_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TGM::TFileParams* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TGM::TFileParams(*(TGM::TFileParams*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ClarensLN_TGMcLcLTFileParams));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TGM::TFileParams G__TTGMcLcLTFileParams;
static int G__G__Clarens_135_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TGM::TFileParams*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TGM::TFileParams*) (soff+(sizeof(TGM::TFileParams)*i)))->~G__TTGMcLcLTFileParams();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TGM::TFileParams*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TGM::TFileParams*) (soff))->~G__TTGMcLcLTFileParams();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__Clarens_135_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TGM::TFileParams* dest = (TGM::TFileParams*) G__getstructoffset();
   *dest = *(TGM::TFileParams*) libp->para[0].ref;
   const TGM::TFileParams& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TLM::TSlaveParams */
static int G__G__Clarens_136_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TLM::TSlaveParams::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_136_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TLM::TSlaveParams::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_136_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TLM::TSlaveParams::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_136_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TLM::TSlaveParams::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_136_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TLM::TSlaveParams*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_136_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TLM::TSlaveParams::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_136_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TLM::TSlaveParams::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_136_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TLM::TSlaveParams::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Clarens_136_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TLM::TSlaveParams::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__G__Clarens_136_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TLM::TSlaveParams *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TLM::TSlaveParams[n];
     } else {
       p = new((void*) gvp) TLM::TSlaveParams[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TLM::TSlaveParams;
     } else {
       p = new((void*) gvp) TLM::TSlaveParams;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ClarensLN_TLMcLcLTSlaveParams));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__Clarens_136_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TLM::TSlaveParams* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TLM::TSlaveParams(*(TLM::TSlaveParams*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ClarensLN_TLMcLcLTSlaveParams));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TLM::TSlaveParams G__TTLMcLcLTSlaveParams;
static int G__G__Clarens_136_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TLM::TSlaveParams*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TLM::TSlaveParams*) (soff+(sizeof(TLM::TSlaveParams)*i)))->~G__TTLMcLcLTSlaveParams();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TLM::TSlaveParams*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TLM::TSlaveParams*) (soff))->~G__TTLMcLcLTSlaveParams();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__Clarens_136_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TLM::TSlaveParams* dest = (TLM::TSlaveParams*) G__getstructoffset();
   *dest = *(TLM::TSlaveParams*) libp->para[0].ref;
   const TLM::TSlaveParams& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* TGM */

/* TLM */

/* TSAM */

/* TEcho */

/* TClSession */

/* TClarens */

/* TXmlRpc */

/* TClProxy */

/* TGM::TFileParams */

/* TLM::TSlaveParams */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncG__Clarens {
 public:
  G__Sizep2memfuncG__Clarens(): p(&G__Sizep2memfuncG__Clarens::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncG__Clarens::*p)();
};

size_t G__get_sizep2memfuncG__Clarens()
{
  G__Sizep2memfuncG__Clarens a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceG__Clarens() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ClarensLN_TGM))) {
     TGM *G__Lderived;
     G__Lderived=(TGM*)0x1000;
     {
       TClProxy *G__Lpbase=(TClProxy*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ClarensLN_TGM),G__get_linked_tagnum(&G__G__ClarensLN_TClProxy),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ClarensLN_TGM),G__get_linked_tagnum(&G__G__ClarensLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ClarensLN_TLM))) {
     TLM *G__Lderived;
     G__Lderived=(TLM*)0x1000;
     {
       TClProxy *G__Lpbase=(TClProxy*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ClarensLN_TLM),G__get_linked_tagnum(&G__G__ClarensLN_TClProxy),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ClarensLN_TLM),G__get_linked_tagnum(&G__G__ClarensLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ClarensLN_TSAM))) {
     TSAM *G__Lderived;
     G__Lderived=(TSAM*)0x1000;
     {
       TClProxy *G__Lpbase=(TClProxy*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ClarensLN_TSAM),G__get_linked_tagnum(&G__G__ClarensLN_TClProxy),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ClarensLN_TSAM),G__get_linked_tagnum(&G__G__ClarensLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ClarensLN_TEcho))) {
     TEcho *G__Lderived;
     G__Lderived=(TEcho*)0x1000;
     {
       TClProxy *G__Lpbase=(TClProxy*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ClarensLN_TEcho),G__get_linked_tagnum(&G__G__ClarensLN_TClProxy),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ClarensLN_TEcho),G__get_linked_tagnum(&G__G__ClarensLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ClarensLN_TClSession))) {
     TClSession *G__Lderived;
     G__Lderived=(TClSession*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ClarensLN_TClSession),G__get_linked_tagnum(&G__G__ClarensLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ClarensLN_TClarens))) {
     TClarens *G__Lderived;
     G__Lderived=(TClarens*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ClarensLN_TClarens),G__get_linked_tagnum(&G__G__ClarensLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ClarensLN_TXmlRpc))) {
     TXmlRpc *G__Lderived;
     G__Lderived=(TXmlRpc*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ClarensLN_TXmlRpc),G__get_linked_tagnum(&G__G__ClarensLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ClarensLN_TClProxy))) {
     TClProxy *G__Lderived;
     G__Lderived=(TClProxy*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ClarensLN_TClProxy),G__get_linked_tagnum(&G__G__ClarensLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ClarensLN_TGMcLcLTFileParams))) {
     TGM::TFileParams *G__Lderived;
     G__Lderived=(TGM::TFileParams*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ClarensLN_TGMcLcLTFileParams),G__get_linked_tagnum(&G__G__ClarensLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ClarensLN_TLMcLcLTSlaveParams))) {
     TLM::TSlaveParams *G__Lderived;
     G__Lderived=(TLM::TSlaveParams*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ClarensLN_TLMcLcLTSlaveParams),G__get_linked_tagnum(&G__G__ClarensLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableG__Clarens() {

   /* Setting up typedef entry */
   G__search_typename2("Char_t",99,-1,0,-1);
   G__setnewtype(-1,"Signed Character 1 byte (char)",0);
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("Long_t",108,-1,0,-1);
   G__setnewtype(-1,"Signed long integer 8 bytes (long)",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("Long64_t",110,-1,0,-1);
   G__setnewtype(-1,"Portable signed long integer 8 bytes",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__G__ClarensLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__ClarensLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__ClarensLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__ClarensLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__ClarensLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__G__ClarensLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__ClarensLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__ClarensLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__ClarensLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__ClarensLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__G__ClarensLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__G__ClarensLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__G__ClarensLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__G__ClarensLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* TGM */
static void G__setup_memvarTGM(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ClarensLN_TGM));
   { TGM *p; p=(TGM*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ClarensLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TLM */
static void G__setup_memvarTLM(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ClarensLN_TLM));
   { TLM *p; p=(TLM*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ClarensLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TSAM */
static void G__setup_memvarTSAM(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ClarensLN_TSAM));
   { TSAM *p; p=(TSAM*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ClarensLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TEcho */
static void G__setup_memvarTEcho(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ClarensLN_TEcho));
   { TEcho *p; p=(TEcho*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ClarensLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TClSession */
static void G__setup_memvarTClSession(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ClarensLN_TClSession));
   { TClSession *p; p=(TClSession*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__ClarensLN_TUrl),-1,-1,4,"fUrl=",0,"server we are connected to");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__ClarensLN_TString),-1,-1,4,"fUser=",0,"SHA1 string");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__ClarensLN_TString),-1,-1,4,"fPassword=",0,"SHA1 string");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ClarensLN_xmlrpc_server_info),-1,-1,4,"fServerInfo=",0,"per server data");
   G__memvar_setup((void*)0,89,0,0,-1,-1,-1,4,"fServerPubRSA=",0,"(X509*)");
   G__memvar_setup((void*)0,89,0,0,-1,-1,-2,4,"fgPrivRSA=",0,(char*)NULL);
   G__memvar_setup((void*)0,89,0,0,-1,-1,-2,4,"fgPubRSA=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__ClarensLN_TString),-1,-2,4,"fgUserCert=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-2,4,"fgInitialized=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ClarensLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TClarens */
static void G__setup_memvarTClarens(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ClarensLN_TClarens));
   { TClarens *p; p=(TClarens*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,G__defined_typename("Long_t"),-1,4,"fTimeout=",0,"timeout on xmlrpc calls");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ClarensLN_THashList),-1,-1,4,"fSessions=",0,"lsit of clarens sessions by URL");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ClarensLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TXmlRpc */
static void G__setup_memvarTXmlRpc(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ClarensLN_TXmlRpc));
   { TXmlRpc *p; p=(TXmlRpc*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ClarensLN_TClSession),-1,-1,4,"fSession=",0,"Clarens session info");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ClarensLN_xmlrpc_env),-1,-1,4,"fEnv=",0,"call enviroment");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__ClarensLN_TString),-1,-1,4,"fService=",0,"our service");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ClarensLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TClProxy */
static void G__setup_memvarTClProxy(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ClarensLN_TClProxy));
   { TClProxy *p; p=(TClProxy*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ClarensLN_TXmlRpc),-1,-1,2,"fRpc=",0,"RPC data");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ClarensLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TGM::TFileParams */
static void G__setup_memvarTGMcLcLTFileParams(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ClarensLN_TGMcLcLTFileParams));
   { TGM::TFileParams *p; p=(TGM::TFileParams*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->fFileName)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__G__ClarensLN_TString),-1,-1,1,"fFileName=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fObjClass)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__G__ClarensLN_TString),-1,-1,1,"fObjClass=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fObjName)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__G__ClarensLN_TString),-1,-1,1,"fObjName=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fDir)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__G__ClarensLN_TString),-1,-1,1,"fDir=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fFirst)-(long)(p)),110,0,0,-1,G__defined_typename("Long64_t"),-1,1,"fFirst=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fNum)-(long)(p)),110,0,0,-1,G__defined_typename("Long64_t"),-1,1,"fNum=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ClarensLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TLM::TSlaveParams */
static void G__setup_memvarTLMcLcLTSlaveParams(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ClarensLN_TLMcLcLTSlaveParams));
   { TLM::TSlaveParams *p; p=(TLM::TSlaveParams*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->fNode)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__G__ClarensLN_TString),-1,-1,1,"fNode=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fPerfidx)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"fPerfidx=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fImg)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__G__ClarensLN_TString),-1,-1,1,"fImg=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fAuth)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__G__ClarensLN_TString),-1,-1,1,"fAuth=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fAccount)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__G__ClarensLN_TString),-1,-1,1,"fAccount=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fType)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__G__ClarensLN_TString),-1,-1,1,"fType=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ClarensLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarG__Clarens() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncTGM(void) {
   /* TGM */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ClarensLN_TGM));
   G__memfunc_setup("TGM",232,G__G__Clarens_99_0_1, 105, G__get_linked_tagnum(&G__G__ClarensLN_TGM), -1, 0, 1, 1, 1, 0, "U 'TXmlRpc' - 0 - rpc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVersion",1030,G__G__Clarens_99_0_2, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "u 'TString' - 1 - version", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CreateSession",1336,G__G__Clarens_99_0_3, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"C - 'Char_t' 10 - dataset u 'TString' - 1 - sessionid "
"U 'TList' - 1 - list u 'TUrl' - 1 - proofUrl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DestroySession",1486,G__G__Clarens_99_0_4, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "C - 'Char_t' 10 - sessionid", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__Clarens_99_0_5, 85, G__get_linked_tagnum(&G__G__ClarensLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TGM::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__Clarens_99_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TGM::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__Clarens_99_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TGM::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__Clarens_99_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TGM::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ClarensLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Clarens_99_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__Clarens_99_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TGM::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Clarens_99_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TGM::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__Clarens_99_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TGM::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Clarens_99_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TGM::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TGM", 232, G__G__Clarens_99_0_17, (int) ('i'), G__get_linked_tagnum(&G__G__ClarensLN_TGM), -1, 0, 1, 1, 1, 0, "u 'TGM' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TGM", 358, G__G__Clarens_99_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__Clarens_99_0_19, (int) ('u'), G__get_linked_tagnum(&G__G__ClarensLN_TGM), -1, 1, 1, 1, 1, 0, "u 'TGM' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTLM(void) {
   /* TLM */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ClarensLN_TLM));
   G__memfunc_setup("TLM",237,G__G__Clarens_100_0_1, 105, G__get_linked_tagnum(&G__G__ClarensLN_TLM), -1, 0, 1, 1, 1, 0, "U 'TXmlRpc' - 0 - rpc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVersion",1030,G__G__Clarens_100_0_2, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "u 'TString' - 1 - version", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("StartSession",1266,G__G__Clarens_100_0_3, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"C - 'Char_t' 10 - sessionid U 'TList' - 1 - config "
"i - 'Int_t' 1 - hbf", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DataReady",879,G__G__Clarens_100_0_4, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"C - 'Char_t' 10 - sessionid n - 'Long64_t' 1 - bytesready "
"n - 'Long64_t' 1 - totalbytes", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Heartbeat",912,G__G__Clarens_100_0_5, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "C - 'Char_t' 10 - sessionid", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EndSession",1019,G__G__Clarens_100_0_6, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "C - 'Char_t' 10 - sessionid", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__Clarens_100_0_7, 85, G__get_linked_tagnum(&G__G__ClarensLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TLM::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__Clarens_100_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TLM::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__Clarens_100_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TLM::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__Clarens_100_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TLM::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ClarensLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Clarens_100_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__Clarens_100_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TLM::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Clarens_100_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TLM::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__Clarens_100_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TLM::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Clarens_100_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TLM::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TLM", 237, G__G__Clarens_100_0_19, (int) ('i'), G__get_linked_tagnum(&G__G__ClarensLN_TLM), -1, 0, 1, 1, 1, 0, "u 'TLM' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TLM", 363, G__G__Clarens_100_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__Clarens_100_0_21, (int) ('u'), G__get_linked_tagnum(&G__G__ClarensLN_TLM), -1, 1, 1, 1, 1, 0, "u 'TLM' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTSAM(void) {
   /* TSAM */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ClarensLN_TSAM));
   G__memfunc_setup("TSAM",309,G__G__Clarens_101_0_1, 105, G__get_linked_tagnum(&G__G__ClarensLN_TSAM), -1, 0, 1, 1, 1, 0, "U 'TXmlRpc' - 0 - rpc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVersion",1030,G__G__Clarens_101_0_2, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "u 'TString' - 1 - version", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDatasets",1113,G__G__Clarens_101_0_3, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'TList' - 1 - datasets", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDSetLocations",1596,G__G__Clarens_101_0_4, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"C - 'Char_t' 10 - dataset U 'TList' - 1 - lmUrls", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDSetFiles",1155,G__G__Clarens_101_0_5, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"C - 'Char_t' 10 - dataset C - 'Char_t' 10 - lmUrl "
"U 'TList' - 1 - files", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDSetSize",1067,G__G__Clarens_101_0_6, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"C - 'Char_t' 10 - dataset n - 'Long64_t' 1 - size", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__Clarens_101_0_7, 85, G__get_linked_tagnum(&G__G__ClarensLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TSAM::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__Clarens_101_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSAM::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__Clarens_101_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TSAM::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__Clarens_101_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TSAM::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ClarensLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Clarens_101_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__Clarens_101_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSAM::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Clarens_101_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSAM::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__Clarens_101_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSAM::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Clarens_101_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSAM::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TSAM", 309, G__G__Clarens_101_0_19, (int) ('i'), G__get_linked_tagnum(&G__G__ClarensLN_TSAM), -1, 0, 1, 1, 1, 0, "u 'TSAM' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TSAM", 435, G__G__Clarens_101_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__Clarens_101_0_21, (int) ('u'), G__get_linked_tagnum(&G__G__ClarensLN_TSAM), -1, 1, 1, 1, 1, 0, "u 'TSAM' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTEcho(void) {
   /* TEcho */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ClarensLN_TEcho));
   G__memfunc_setup("TEcho",467,G__G__Clarens_102_0_1, 105, G__get_linked_tagnum(&G__G__ClarensLN_TEcho), -1, 0, 1, 1, 1, 0, "U 'TXmlRpc' - 0 - rpc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Echo",383,G__G__Clarens_102_0_2, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"C - 'Char_t' 10 - in u 'TString' - 1 - out", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Hostname",831,G__G__Clarens_102_0_3, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"u 'TString' - 1 - name u 'TString' - 1 - ip", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Benchmark",907,G__G__Clarens_102_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - iterations", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__Clarens_102_0_5, 85, G__get_linked_tagnum(&G__G__ClarensLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TEcho::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__Clarens_102_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TEcho::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__Clarens_102_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TEcho::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__Clarens_102_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TEcho::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ClarensLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Clarens_102_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__Clarens_102_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TEcho::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Clarens_102_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TEcho::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__Clarens_102_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TEcho::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Clarens_102_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TEcho::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TEcho", 467, G__G__Clarens_102_0_17, (int) ('i'), G__get_linked_tagnum(&G__G__ClarensLN_TEcho), -1, 0, 1, 1, 1, 0, "u 'TEcho' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TEcho", 593, G__G__Clarens_102_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__Clarens_102_0_19, (int) ('u'), G__get_linked_tagnum(&G__G__ClarensLN_TEcho), -1, 1, 1, 1, 1, 0, "u 'TEcho' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTClSession(void) {
   /* TClSession */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ClarensLN_TClSession));
   G__memfunc_setup("TClSession",999,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__ClarensLN_TClSession), -1, 0, 5, 1, 4, 0, 
"C - 'Char_t' 10 - url C - 'Char_t' 10 - user "
"C - 'Char_t' 10 - pw U 'xmlrpc_server_info' - 0 - info "
"Y - - 0 - serverPubRSA", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitAuthentication",1876,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 3, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetServerInfo",1315,G__G__Clarens_104_0_3, 85, G__get_linked_tagnum(&G__G__ClarensLN_xmlrpc_server_info), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetServer",919,G__G__Clarens_104_0_4, 67, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Create",596,G__G__Clarens_104_0_5, 85, G__get_linked_tagnum(&G__G__ClarensLN_TClSession), -1, 0, 1, 3, 1, 0, "C - 'Char_t' 10 - url", (char*)NULL, (void*) G__func2void( (TClSession* (*)(const Char_t*))(&TClSession::Create) ), 0);
   G__memfunc_setup("Class",502,G__G__Clarens_104_0_6, 85, G__get_linked_tagnum(&G__G__ClarensLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TClSession::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__Clarens_104_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TClSession::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__Clarens_104_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TClSession::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__Clarens_104_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TClSession::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ClarensLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Clarens_104_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__Clarens_104_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TClSession::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Clarens_104_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TClSession::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__Clarens_104_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TClSession::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Clarens_104_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TClSession::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TClSession", 999, G__G__Clarens_104_0_18, (int) ('i'), G__get_linked_tagnum(&G__G__ClarensLN_TClSession), -1, 0, 1, 1, 1, 0, "u 'TClSession' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TClSession", 1125, G__G__Clarens_104_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__Clarens_104_0_20, (int) ('u'), G__get_linked_tagnum(&G__G__ClarensLN_TClSession), -1, 1, 1, 1, 1, 0, "u 'TClSession' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTClarens(void) {
   /* TClarens */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ClarensLN_TClarens));
   G__memfunc_setup("TClarens",796,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__ClarensLN_TClarens), -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Connect",714,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__G__ClarensLN_TClSession), -1, 0, 1, 1, 4, 0, "C - 'Char_t' 10 - url", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTimeout",1043,G__G__Clarens_105_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "l - 'Long_t' 0 - msec", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTimeout",1031,G__G__Clarens_105_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CreateEcho",979,G__G__Clarens_105_0_5, 85, G__get_linked_tagnum(&G__G__ClarensLN_TEcho), -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - echoUrl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CreateGM",744,G__G__Clarens_105_0_6, 85, G__get_linked_tagnum(&G__G__ClarensLN_TGM), -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - gmUrl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CreateLM",749,G__G__Clarens_105_0_7, 85, G__get_linked_tagnum(&G__G__ClarensLN_TLM), -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - lmUrl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CreateSAM",821,G__G__Clarens_105_0_8, 85, G__get_linked_tagnum(&G__G__ClarensLN_TSAM), -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - samUrl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,G__G__Clarens_105_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TClarens::Init) ), 0);
   G__memfunc_setup("Class",502,G__G__Clarens_105_0_10, 85, G__get_linked_tagnum(&G__G__ClarensLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TClarens::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__Clarens_105_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TClarens::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__Clarens_105_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TClarens::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__Clarens_105_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TClarens::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ClarensLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Clarens_105_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__Clarens_105_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TClarens::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Clarens_105_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TClarens::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__Clarens_105_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TClarens::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Clarens_105_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TClarens::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TClarens", 796, G__G__Clarens_105_0_22, (int) ('i'), G__get_linked_tagnum(&G__G__ClarensLN_TClarens), -1, 0, 1, 1, 1, 0, "u 'TClarens' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TClarens", 922, G__G__Clarens_105_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__Clarens_105_0_24, (int) ('u'), G__get_linked_tagnum(&G__G__ClarensLN_TClarens), -1, 1, 1, 1, 1, 0, "u 'TClarens' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTXmlRpc(void) {
   /* TXmlRpc */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ClarensLN_TXmlRpc));
   G__memfunc_setup("TXmlRpc",682,G__G__Clarens_106_0_1, 105, G__get_linked_tagnum(&G__G__ClarensLN_TXmlRpc), -1, 0, 1, 1, 1, 0, "U 'TClSession' - 0 - session", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetService",1021,G__G__Clarens_106_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - svc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetService",1009,G__G__Clarens_106_0_3, 67, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEnv",585,G__G__Clarens_106_0_4, 85, G__get_linked_tagnum(&G__G__ClarensLN_xmlrpc_env), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetServerInfo",1315,G__G__Clarens_106_0_5, 85, G__get_linked_tagnum(&G__G__ClarensLN_xmlrpc_server_info), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetServer",919,G__G__Clarens_106_0_6, 67, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Call",380,G__G__Clarens_106_0_7, 85, G__get_linked_tagnum(&G__G__ClarensLN_xmlrpc_value), -1, 0, 2, 1, 1, 0, 
"C - 'Char_t' 10 - method U 'xmlrpc_value' - 0 - arg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RpcFailed",874,G__G__Clarens_106_0_8, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"C - 'Char_t' 10 - where C - 'Char_t' 10 - what", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PrintValue",1034,G__G__Clarens_106_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "U 'xmlrpc_value' - 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__Clarens_106_0_10, 85, G__get_linked_tagnum(&G__G__ClarensLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TXmlRpc::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__Clarens_106_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TXmlRpc::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__Clarens_106_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TXmlRpc::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__Clarens_106_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TXmlRpc::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ClarensLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Clarens_106_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__Clarens_106_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TXmlRpc::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Clarens_106_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TXmlRpc::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__Clarens_106_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TXmlRpc::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Clarens_106_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TXmlRpc::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TXmlRpc", 682, G__G__Clarens_106_0_22, (int) ('i'), G__get_linked_tagnum(&G__G__ClarensLN_TXmlRpc), -1, 0, 1, 1, 1, 0, "u 'TXmlRpc' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TXmlRpc", 808, G__G__Clarens_106_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__Clarens_106_0_24, (int) ('u'), G__get_linked_tagnum(&G__G__ClarensLN_TXmlRpc), -1, 1, 1, 1, 1, 0, "u 'TXmlRpc' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTClProxy(void) {
   /* TClProxy */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ClarensLN_TClProxy));
   G__memfunc_setup("TClProxy",805,G__G__Clarens_107_0_1, 105, G__get_linked_tagnum(&G__G__ClarensLN_TClProxy), -1, 0, 2, 1, 1, 0, 
"C - 'Char_t' 10 - service U 'TXmlRpc' - 0 - rpc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("RpcFailed",874,G__G__Clarens_107_0_3, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"C - 'Char_t' 10 - member C - 'Char_t' 10 - what", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__Clarens_107_0_4, 85, G__get_linked_tagnum(&G__G__ClarensLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TClProxy::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__Clarens_107_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TClProxy::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__Clarens_107_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TClProxy::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__Clarens_107_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TClProxy::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ClarensLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Clarens_107_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__Clarens_107_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TClProxy::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Clarens_107_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TClProxy::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__Clarens_107_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TClProxy::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Clarens_107_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TClProxy::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TClProxy", 805, G__G__Clarens_107_0_16, (int) ('i'), G__get_linked_tagnum(&G__G__ClarensLN_TClProxy), -1, 0, 1, 1, 1, 0, "u 'TClProxy' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TClProxy", 931, G__G__Clarens_107_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__Clarens_107_0_18, (int) ('u'), G__get_linked_tagnum(&G__G__ClarensLN_TClProxy), -1, 1, 1, 1, 1, 0, "u 'TClProxy' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTGMcLcLTFileParams(void) {
   /* TGM::TFileParams */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ClarensLN_TGMcLcLTFileParams));
   G__memfunc_setup("TFileParams",1080,G__G__Clarens_135_0_1, 105, G__get_linked_tagnum(&G__G__ClarensLN_TGMcLcLTFileParams), -1, 0, 6, 1, 1, 0, 
"C - 'Char_t' 10 - file C - 'Char_t' 10 - cl "
"C - 'Char_t' 10 - nm C - 'Char_t' 10 - dir "
"i - 'Int_t' 0 - first i - 'Int_t' 0 - num", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__Clarens_135_0_3, 85, G__get_linked_tagnum(&G__G__ClarensLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TGM::TFileParams::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__Clarens_135_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TGM::TFileParams::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__Clarens_135_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TGM::TFileParams::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__Clarens_135_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TGM::TFileParams::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ClarensLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Clarens_135_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__Clarens_135_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TGM::TFileParams::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Clarens_135_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TGM::TFileParams::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__Clarens_135_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TGM::TFileParams::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Clarens_135_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TGM::TFileParams::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TFileParams", 1080, G__G__Clarens_135_0_15, (int) ('i'), G__get_linked_tagnum(&G__G__ClarensLN_TGMcLcLTFileParams), -1, 0, 1, 1, 1, 0, "u 'TGM::TFileParams' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TFileParams", 1206, G__G__Clarens_135_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__Clarens_135_0_17, (int) ('u'), G__get_linked_tagnum(&G__G__ClarensLN_TGMcLcLTFileParams), -1, 1, 1, 1, 1, 0, "u 'TGM::TFileParams' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTLMcLcLTSlaveParams(void) {
   /* TLM::TSlaveParams */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ClarensLN_TLMcLcLTSlaveParams));
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__Clarens_136_0_2, 85, G__get_linked_tagnum(&G__G__ClarensLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TLM::TSlaveParams::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__Clarens_136_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TLM::TSlaveParams::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__Clarens_136_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TLM::TSlaveParams::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__Clarens_136_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TLM::TSlaveParams::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ClarensLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Clarens_136_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__Clarens_136_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TLM::TSlaveParams::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Clarens_136_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TLM::TSlaveParams::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__Clarens_136_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TLM::TSlaveParams::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Clarens_136_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TLM::TSlaveParams::DeclFileLine) ), 0);
   // automatic default constructor
   G__memfunc_setup("TSlaveParams", 1203, G__G__Clarens_136_0_14, (int) ('i'), G__get_linked_tagnum(&G__G__ClarensLN_TLMcLcLTSlaveParams), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("TSlaveParams", 1203, G__G__Clarens_136_0_15, (int) ('i'), G__get_linked_tagnum(&G__G__ClarensLN_TLMcLcLTSlaveParams), -1, 0, 1, 1, 1, 0, "u 'TLM::TSlaveParams' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TSlaveParams", 1329, G__G__Clarens_136_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__Clarens_136_0_17, (int) ('u'), G__get_linked_tagnum(&G__G__ClarensLN_TLMcLcLTSlaveParams), -1, 1, 1, 1, 1, 0, "u 'TLM::TSlaveParams' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncG__Clarens() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
   G__memvar_setup((void*)(&gClarens),85,0,0,G__get_linked_tagnum(&G__G__ClarensLN_TClarens),-1,-1,1,"gClarens=",0,(char*)NULL);

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalG__Clarens() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcG__Clarens() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__G__ClarensLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__G__ClarensLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__G__ClarensLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__G__ClarensLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__G__ClarensLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__G__ClarensLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__G__ClarensLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__ClarensLN_TList = { "TList" , 99 , -1 };
G__linked_taginfo G__G__ClarensLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__G__ClarensLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__ClarensLN_TGM = { "TGM" , 99 , -1 };
G__linked_taginfo G__G__ClarensLN_TLM = { "TLM" , 99 , -1 };
G__linked_taginfo G__G__ClarensLN_TSAM = { "TSAM" , 99 , -1 };
G__linked_taginfo G__G__ClarensLN_TEcho = { "TEcho" , 99 , -1 };
G__linked_taginfo G__G__ClarensLN_THashList = { "THashList" , 99 , -1 };
G__linked_taginfo G__G__ClarensLN_TClSession = { "TClSession" , 99 , -1 };
G__linked_taginfo G__G__ClarensLN_TClarens = { "TClarens" , 99 , -1 };
G__linked_taginfo G__G__ClarensLN_TXmlRpc = { "TXmlRpc" , 99 , -1 };
G__linked_taginfo G__G__ClarensLN_TClProxy = { "TClProxy" , 99 , -1 };
G__linked_taginfo G__G__ClarensLN_xmlrpc_server_info = { "xmlrpc_server_info" , 115 , -1 };
G__linked_taginfo G__G__ClarensLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__G__ClarensLN_TUrl = { "TUrl" , 99 , -1 };
G__linked_taginfo G__G__ClarensLN_TGMcLcLTFileParams = { "TGM::TFileParams" , 115 , -1 };
G__linked_taginfo G__G__ClarensLN_TLMcLcLTSlaveParams = { "TLM::TSlaveParams" , 115 , -1 };
G__linked_taginfo G__G__ClarensLN_xmlrpc_env = { "xmlrpc_env" , 115 , -1 };
G__linked_taginfo G__G__ClarensLN_xmlrpc_value = { "xmlrpc_value" , 115 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableG__Clarens() {
  G__G__ClarensLN_TClass.tagnum = -1 ;
  G__G__ClarensLN_TBuffer.tagnum = -1 ;
  G__G__ClarensLN_TMemberInspector.tagnum = -1 ;
  G__G__ClarensLN_TObject.tagnum = -1 ;
  G__G__ClarensLN_TString.tagnum = -1 ;
  G__G__ClarensLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__G__ClarensLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__ClarensLN_TList.tagnum = -1 ;
  G__G__ClarensLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__G__ClarensLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__ClarensLN_TGM.tagnum = -1 ;
  G__G__ClarensLN_TLM.tagnum = -1 ;
  G__G__ClarensLN_TSAM.tagnum = -1 ;
  G__G__ClarensLN_TEcho.tagnum = -1 ;
  G__G__ClarensLN_THashList.tagnum = -1 ;
  G__G__ClarensLN_TClSession.tagnum = -1 ;
  G__G__ClarensLN_TClarens.tagnum = -1 ;
  G__G__ClarensLN_TXmlRpc.tagnum = -1 ;
  G__G__ClarensLN_TClProxy.tagnum = -1 ;
  G__G__ClarensLN_xmlrpc_server_info.tagnum = -1 ;
  G__G__ClarensLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__G__ClarensLN_TUrl.tagnum = -1 ;
  G__G__ClarensLN_TGMcLcLTFileParams.tagnum = -1 ;
  G__G__ClarensLN_TLMcLcLTSlaveParams.tagnum = -1 ;
  G__G__ClarensLN_xmlrpc_env.tagnum = -1 ;
  G__G__ClarensLN_xmlrpc_value.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableG__Clarens() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__G__ClarensLN_TClass);
   G__get_linked_tagnum_fwd(&G__G__ClarensLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__G__ClarensLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__G__ClarensLN_TObject);
   G__get_linked_tagnum_fwd(&G__G__ClarensLN_TString);
   G__get_linked_tagnum_fwd(&G__G__ClarensLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__G__ClarensLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__ClarensLN_TList);
   G__get_linked_tagnum_fwd(&G__G__ClarensLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__ClarensLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ClarensLN_TGM),sizeof(TGM),-1,62464,"PEAC Global Manager proxy",G__setup_memvarTGM,G__setup_memfuncTGM);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ClarensLN_TLM),sizeof(TLM),-1,62464,"PEAC Local Manager proxy",G__setup_memvarTLM,G__setup_memfuncTLM);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ClarensLN_TSAM),sizeof(TSAM),-1,62464,"PEAC SAM proxy",G__setup_memvarTSAM,G__setup_memfuncTSAM);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ClarensLN_TEcho),sizeof(TEcho),-1,62464,"Echo proxy",G__setup_memvarTEcho,G__setup_memfuncTEcho);
   G__get_linked_tagnum_fwd(&G__G__ClarensLN_THashList);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ClarensLN_TClSession),sizeof(TClSession),-1,62464,"Clarens Session",G__setup_memvarTClSession,G__setup_memfuncTClSession);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ClarensLN_TClarens),sizeof(TClarens),-1,29952,"Clarens main interface",G__setup_memvarTClarens,G__setup_memfuncTClarens);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ClarensLN_TXmlRpc),sizeof(TXmlRpc),-1,62464,"XMLRPC interface class",G__setup_memvarTXmlRpc,G__setup_memfuncTXmlRpc);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ClarensLN_TClProxy),sizeof(TClProxy),-1,62464,"Clarens Proxy base",G__setup_memvarTClProxy,G__setup_memfuncTClProxy);
   G__get_linked_tagnum_fwd(&G__G__ClarensLN_xmlrpc_server_info);
   G__get_linked_tagnum_fwd(&G__G__ClarensLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__G__ClarensLN_TUrl);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ClarensLN_TGMcLcLTFileParams),sizeof(TGM::TFileParams),-1,61440,"PEAC File description",G__setup_memvarTGMcLcLTFileParams,G__setup_memfuncTGMcLcLTFileParams);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ClarensLN_TLMcLcLTSlaveParams),sizeof(TLM::TSlaveParams),-1,28672,"PEAC Slave config",G__setup_memvarTLMcLcLTSlaveParams,G__setup_memfuncTLMcLcLTSlaveParams);
   G__get_linked_tagnum_fwd(&G__G__ClarensLN_xmlrpc_env);
   G__get_linked_tagnum_fwd(&G__G__ClarensLN_xmlrpc_value);
}
extern "C" void G__cpp_setupG__Clarens(void) {
  G__check_setup_version(30051515,"G__cpp_setupG__Clarens()");
  G__set_cpp_environmentG__Clarens();
  G__cpp_setup_tagtableG__Clarens();

  G__cpp_setup_inheritanceG__Clarens();

  G__cpp_setup_typetableG__Clarens();

  G__cpp_setup_memvarG__Clarens();

  G__cpp_setup_memfuncG__Clarens();
  G__cpp_setup_globalG__Clarens();
  G__cpp_setup_funcG__Clarens();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncG__Clarens();
  return;
}
class G__cpp_setup_initG__Clarens {
  public:
    G__cpp_setup_initG__Clarens() { G__add_setup_func("G__Clarens",(G__incsetup)(&G__cpp_setupG__Clarens)); G__call_setup_funcs(); }
   ~G__cpp_setup_initG__Clarens() { G__remove_setup_func("G__Clarens"); }
};
G__cpp_setup_initG__Clarens G__cpp_setup_initializerG__Clarens;

