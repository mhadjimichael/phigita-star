# Sally - A Tool for Embedding Strings in Vector Spaces
# Copyright (C) 2010-2011 Konrad Rieck (konrad@mlsec.org)

AC_INIT([sally], [0.6.3], [konrad@mlsec.org])
AC_PREFIX_DEFAULT("/usr/local")

# Library version current:revision:age
# See http://developer.apple.com/documentation/developertools/glibtool/libtool_6.html
LIB_VERSION=1:1:1

echo
echo "  .Oo Sally - A Tool for Embedding Strings in Vector Spaces"
echo "      Copyright (c) 2010-2011 Konrad Rieck (konrad@mlsec.org)"
echo

# Init automake & config.h
AM_INIT_AUTOMAKE
AM_CONFIG_HEADER([config.h])

# Check for important programs
AC_PROG_CC
AC_PROG_LD
AC_PROG_INSTALL

# Libtool stuff
AC_CONFIG_MACRO_DIR(m4)
AC_PROG_LIBTOOL

# Set GCC and C99 flags if present
if test "$GCC" = "yes" ; then
   CFLAGS="$CFLAGS -std=c99 -Wall -fPIC"
fi

# libm
AC_CHECK_HEADERS([math.h], HEADER_MATH="yes")
AC_CHECK_LIB([m], pow, LIBRARY_MATH="yes")
if test "x$LIBRARY_MATH" != "x" && test "x$HEADER_MATH" != "x" ; then
    LIBS="-lm $LIBS"
else
    AC_MSG_ERROR([The library libm is required for compilation])
fi

# libz
AC_CHECK_HEADERS([zlib.h], HEADER_ZLIB="yes")
AC_CHECK_LIB([z], gzopen, LIBRARY_ZLIB="yes")
if test "x$LIBRARY_ZLIB" != "x" && test "x$HEADER_ZLIB" != "x" ; then
    LIBS="-lz $LIBS"
else
    AC_MSG_ERROR([The library libz is required for compilation])
fi

# libconfig
PKG_CHECK_MODULES([PKGCONFIG], [libconfig >= 1.4])
CFLAGS="$CFLAGS $PKGCONFIG_CFLAGS"
LIBS="$LIBS $PKGCONFIG_LIBS"
INCLUDES="$INCLUDES `pkg-config --cflags-only-I libconfig`"
AC_CHECK_HEADERS([libconfig.h], HEADER_LIBCONFIG="yes")

# features
AC_ARG_ENABLE(openmp, 
    [  --enable-openmp         enable support for OpenMP ],
    [ 
	if test "x$enableval" = "xyes" ; then
		ENABLE_OPENMP=yes
		AC_DEFINE(ENABLE_OPENMP, 1, [Enable support for OpenMP])
        else
		ENABLE_OPENMP=no
        fi
    ], [ ENABLE_OPENMP=no ]
)

# OpenMP support
AX_OPENMP([
   HAVE_OPENMP=yes
   AC_DEFINE(HAVE_OPENMP, 1, [Enable OpenMP support])
],[
   HAVE_OPENMP=no
])

if test "x$ENABLE_OPENMP" = "xyes" ; then
   if test "x$HAVE_OPENMP" = "xno" ; then
      AC_MSG_ERROR([OpenMP support enabled but OpenMP not available])
   fi
   CFLAGS="$CFLAGS $OPENMP_CFLAGS"
fi 

# libarchive
AC_ARG_ENABLE(libarchive,
    [  --enable-libarchive     enable support for loading archives. ],
    [
        if test "x$enableval" = "xyes" ; then
                ENABLE_LIBARCHIVE=yes
                AC_DEFINE(ENABLE_LIBARCHIVE, 1, [Enable support for loading archives])
        else
                ENABLE_LIBARCHIVE=no
        fi
    ], [ ENABLE_LIBARCHIVE=no ]
)

AC_CHECK_HEADERS([archive.h], HEADER_LIBARCHIVE="yes")
AC_CHECK_LIB([archive], archive_read_new, LIBRARY_LIBARCHIVE="yes")

if test "x$ENABLE_LIBARCHIVE" = "xyes" ; then
    if test "x$LIBRARY_LIBARCHIVE" != "x" && test "x$HEADER_LIBARCHIVE" != "x" ; then
        LIBS="-larchive $LIBS"
    else
        AC_MSG_ERROR([libarchive requested but not available])
    fi
fi

# Check headers
AC_CHECK_HEADERS([getopt.h string.h strings.h])
AC_CHECK_HEADERS([uthash.h uthash/uthash.h], HEADER_UTHASH="yes")

# Check functions
AC_CHECK_FUNC(log2, AC_DEFINE(HAVE_FUNC_LOG2, 1, 
       [Define to 1 if you have the function log2]))

# MD5 hash flag
AC_ARG_ENABLE(md5hash,
    [  --enable-md5hash        enable MD5 as alternative hash ],
    [
        if test "x$enableval" = "xyes" ; then
                ENABLE_MD5HASH=yes
                AC_DEFINE(ENABLE_MD5HASH, 1, [Enable MD5 as alternative hash])
        else
                ENABLE_MD5HASH=no
        fi
    ], [ ENABLE_MD5HASH=no ]
)

AC_SUBST([INCLUDES])
AC_SUBST([LIB_VERSION])

AC_CONFIG_FILES([ 
   Makefile \
   src/Makefile \
   src/input/Makefile \
   src/output/Makefile \
   src/fvec/Makefile \
   doc/Makefile \
   tests/Makefile \
   contrib/Makefile \
])

AC_OUTPUT_COMMANDS([],[
   ENABLE_OPENMP=$ENABLE_OPENMP
   ENABLE_MD5HASH=$ENABLE_MD5HASH
   ENABLE_LIBARCHIVE=$ENABLE_LIBARCHIVE
])

AC_OUTPUT

echo
echo " .Oo Features:"
echo "     Support for multi-processing (--enable-openmp):        $ENABLE_OPENMP"
echo "     Support for loading archives (--enable-libarchive):    $ENABLE_LIBARCHIVE"
echo "     MD5 as alternative hash (--enable-md5hash):            $ENABLE_MD5HASH"
