ad_page_contract {
    @author Neophytos Demetriou
} {
    id:integer
    {p:integer 1}
    {size 500}
    {q ""}
}

#set size 500

set pathexp [list "User [ad_conn user_id]"]
set data [::db::Set new \
	      -pathexp $pathexp \
	      -select [list id title {extra->'XO.File.Type' as filetype} {extra->'XO.Info.page_size' as page_size} {extra->'XO.Info.pages' as pages}] \
	      -type ::Content_Item \
	      -noinit]

$data lappend where "[::xo::db::qualifier id = $id]"
$data load

set o [$data head]
set object_id [$o set id]
set page_width [lindex [$o set page_size] 0]
set page_height [lindex [$o set page_size] 2]

if { $page_width > $page_height } {
    set page_size $page_width
} else {
    set page_size $page_height
}


set list ""
foreach item $pathexp {
    foreach {className instance_id} $item break
    lappend list [$className set id]-${instance_id}
}

set directory /web/data/storage/
append directory [join $list .]/
append directory $object_id


set pages [$o set pages]

set nextUrl "\#"
set previousUrl "\#"

if { ${p} < ${pages} } { set nextUrl [export_vars -base . -override [list "p [expr {1+$p}]"] {q size}] }
if { ${p} > 1 } { set previousUrl [export_vars -base . -override [list "p [expr {-1+$p}]"] {q size}] }

#ns_log notice "xo-drive app-reader view id=$id sql=[$data set sql] p=$p pages=$pages"
if { ${p} > ${pages} || ${p} < 1 } {
    rp_returnnotfound
    return
}

set numChars 30000
set doc_xml ""
set fp [open "|bzcat ${directory}/c-${object_id}.xml.bz2"]
while {![eof $fp]} { append doc_xml [read $fp $numChars] }
close $fp

	set docId [dom parse -simple -html $doc_xml]
	set root [$docId documentElement]

	set pageXmlNode [$root selectNodes [subst -nocommands -nobackslashes {//page[@number="${p}"]}]]

	set result ""
	set highlights ""
	foreach node [$pageXmlNode selectNodes {fontspec}] {
	    set font_id [$node getAttribute id]
	    set font_size [$node getAttribute size]
	    set font_family [$node getAttribute family]
	    set fontspec($font_id) [list $font_size $font_family]
	}


set result ""
	if { [exists_and_not_null q] } { 
	    set searchQuery [::util::dbquotevalue ${q}]
	    set queryAsVector [string map {{'} {}} [[$data getConn] getvalue "select strip(to_tsvector('[default_text_search_config]',${searchQuery}))"]]

	    set lexemes [split $queryAsVector]
	    foreach node [$pageXmlNode selectNodes {text}] {
		set line [string tolower [$node asText]]
		set charIndex 0
		#ffcf5c #cfff5c #cf5cff #a0f0f0 #aa0000 #00aa00 #0000aa
		#color {#ffcf5c #cfff5c #cf5cff #1b9e77 #d95f02 #7570b3 #e7298a #66a61e #e6ab02 #a6761d #666666 #0033cc}
		# "#ffcf5c"
		set color "rgb(253,144,2)"
		foreach lexeme $lexemes {
		    while { -1 != [set charIndex [string first $lexeme $line $charIndex]] } {
			set top [$node getAttribute top]
			set left [$node getAttribute left]
			set height [$node getAttribute height]
			set xright [concat $left [string trim [$node getAttribute xright]]]
			
			set wordend [string wordend $line $charIndex]
			set begin_x [lindex $xright [expr { $charIndex}]]
			set end_x [lindex $xright [expr { $wordend  }]]
			
			lappend highlights [list $begin_x $end_x $top $left $height $color]
			incr charIndex
		    }   
		}
	    }

	    foreach item $highlights {
		foreach {begin_x end_x top left line_height color} $item break
		
		#set zoom 1.1
		set zoom [expr { double(${size}) / double(${page_size}) }]
		set begin_x [expr { int(floor($begin_x * $zoom)) }]
		set end_x [expr { int(ceil($end_x * $zoom)) }]
		set top [expr { int(floor($top * $zoom)) }]
		set line_height [expr { int(ceil($height * $zoom)) }]
		
		#	    incr begin_x -1
		#	    incr end_x 1
		#	    incr top -1
		#	    incr line_height 3
		set xwidth [expr { $end_x - $begin_x }]
		
		set pagexml [$pageXmlNode getAttribute number]
		append result [subst -nocommands -nobackslashes {<img class="lexeme" src="http://www.phigita.net/graphics/s.gif" style="padding:0;z-index:100;filter:alpha(opacity=40);opacity: 0.4;-moz-opacity:0.4;position:absolute;top:${top}px;left:${begin_x}px;background:${color};width:${xwidth}px;" height="${line_height}px"/>}]
	    }
	}


#<input type="submit" value="Search Inside"></form>
#<form action="."><input type="hidden" name="" value="">

set zoomSlider ""
foreach sizeValue {240 500 800} prettyName {small medium large} {
    if { $sizeValue eq $size } {
	lappend zoomSlider $prettyName
    } else {
	set url [export_vars -base . -override [list [list size $sizeValue]] {q p}]
	lappend zoomSlider [format "<a href=\"%s\">%s</a>" $url $prettyName]
    }
}
    set zoomSlider [join $zoomSlider { | }]

ns_return 200 text/html [subst -nocommands -nobackslashes {
<form name="readerNav" action="./" method="GET">
	    [${zoomSlider}]
<input type="hidden" name="size" value="$size">
<input type="text" name="q" value="${q}">
<a href="$previousUrl">Previous</a>
	    Page <input type="text" name="p" value="${p}" size="2"> of ${pages}
<a href="$nextUrl">Next</a>
	    <input type="submit" value="GO" style="visibility:hidden;">

</form>
	    <div style="position:relative;">${result}<img style="position:absolute;top:0px;left:0px;" src="../../view/${id}?size=${size}&p=${p}" /></div>
	}]
