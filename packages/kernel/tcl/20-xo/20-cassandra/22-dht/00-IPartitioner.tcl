namespace eval ::xo::dht {;}

Class ::xo::dht::IPartitioner -parameter {
    {preservesOrder ""}
}


# Convert the on disk representation to a DecoratedKey object
# @param key On disk representation 
# @return DecoratedKey object
::xo::dht::IPartitioner convertFromDiskFormat {key} {}


# Convert the DecoratedKey to the on disk format used for
# this partitioner.
# @param key The DecoratedKey in question
# @return key On disk representation
::xo::dht::IPartitioner convertToDiskFormat {key} {}

# Transform key to object representation of the on-disk format.
# @param key the raw, client-facing key
# @return decorated version of key
::xo::dht::IPartitioner decorateKey {key} {}


# @return a comparator for decorated key objects, not strings
# return Comparator<DecoratedKey<T>> 
::xo::dht::IPartitioner getDecoratedKeyComparator {} {}



# Calculate a Token representing the approximate "middle" of the given
# range.
#
# The Tokens must have been generated by previous calls to midpoint,
# or be equal to this.getMinimumToken(). The range may not wrap unless it
# involves this.getMinimumToken().
::xo::dht::IPartitioner instproc midpoint {left right} {}


# @return The minimum possible Token in the range that is being partitioned.
::xo::dht::IPartitioner instproc getMinimumToken {} {}

# @return a Token that can be used to route a given key
# (This is NOT a method to create a Token from its string representation;
# for that, use TokenFactory.fromString.)
::xo::dht::IPartitioner instproc getToken {key} {}

# @return a randomly generated token
::xo::dht::IPartitioner instproc getRandomToken {} {}

::xo::dht::IPartitioner instproc getTokenFactory {} {}
