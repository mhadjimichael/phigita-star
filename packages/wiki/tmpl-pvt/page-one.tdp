contract -require_registration "1" -require_secure_conn "1" {
    param -id "id" -check "naturalnum notnull"
}

#::xo::structured_text::init_css 
#::xo::html::cssList {main sidebar comment-list commentList comment}
#set cssList [list destBox NewFol]

### PRIVATE - PRIVATE - PRIVATE ONLY
#set current_root_of_hierarchy [User set id]-[ad_conn user_id]

#set ctx_uid [ad_conn user_id]
#set screen_name [db_string get_screen_name "select screen_name from users where user_id=:ctx_uid"]
#set pathexp [list "User $ctx_uid"]


datastore \
    -id pagedata \
    -singleton true \
    -scope user \
    -from_class ::wiki::Page \
    -where [list "id = :id"] \
    -extend {
	set screen_name [ad_conn screen_name]
	set pretty_creation_date [lc_time_fmt $last_update %Q]
	set pretty_creation_time [lc_time_fmt $last_update %r]

	set pretty_last_update_date [lc_time_fmt $last_update %Q]
	set pretty_last_update_time [lc_time_fmt $last_update %r]

	array set config [list \
			      root [User set id]-[ad_conn user_id] \
			      container_object_id "X" \
			      image_prefix "image/"]

	set content_in_html ""
	::xo::structured_text::stx_to_html config content content_in_html

	set ac_toggle_msg [ad_decode $shared_p f publish privatize]
	set ac_inverse_shared_p [ad_decode $shared_p f t f]

    }

guard { return @{pagedata:rowcount} }


datastore \
    -id prev_wikidata \
    -scope user \
    -from_class ::wiki::Page \
    -where [list "creation_date < \[ns_dbquotevalue @{object_get.pagedata.creation_date}\]" "title is not null"] \
    -order "creation_date desc" \
    -limit 5

datastore \
    -id next_wikidata \
    -scope user \
    -from_class ::wiki::Page \
    -where [list "creation_date > \[ns_dbquotevalue @{object_get.pagedata.creation_date}\]" "title is not null"] \
    -order "creation_date" \
    -limit 5

val -id "next_wikidata" { lreverse @{next_wikidata} }


val -id prev_page -x-value-from prev_wikidata { lindex @{prev_wikidata} 0 }
val -id next_page -x-value-from next_wikidata { lindex @{next_wikidata} end }

val -id context_bar { return [::xo::kit::context_bar "One Page"] }

# keep css classes and tags used by context_bar
::xo::tdp::excludeClassesFromRenaming {breadcrumb divider ul li active}


val -id title -with pagedata { return [::util::coalesce @{title} "Entry \#@{id}"] }


# -------------------------------------------------------------------------------------------

css {
    #buttonbar {margin-top:10px;background:#ffffcc;padding:10px;border:1px dashed;} 
}


js {
    (function(){
	function check(func,msg){
	    var i;
	    if (func==0) {
		return confirm("Are you sure you want to " + msg + " this blog item?");
	    }
	    return true;
	}

	function apply_label() {
	    var destEl = document.getElementById("destBox");
	    var destBox = destEl.value;
	    if (destBox == 0) {
		var label_name = prompt("Please enter a new label name:");
		if (!label_name || label_name == '') {
		    return false;
		} else {
		    var newEl = document.getElementById("NewFol");
		    newEl.value = label_name;
		}
	    }
	}
	window['check'] = check;
	window['apply_label'] = apply_label;
    })();
}


master -title "@{title} - Private Blog Area" {
    layout_row {
	layout_col -class span1 
	layout_col -class span11 {
	    nt @{context_bar:noquote}
	}
    }

    layout_row {
	layout_col -class span1
	layout_col -class span8 {

	    # action area
	    div -id "buttonbar" {

		tpl -with pagedata {
		    b { t "Actions: " }
		    a -class "btn btn-mini btn-info" -href "page-revisions?page_id=@{id}" { t "Page Revisions" }
		    t " - "
		    a -class "btn btn-mini btn-warning" -href "page-edit?id=@{id}" { t "Edit" }
		    t " - "
		    a -class "btn btn-mini btn-danger" -href "page-delete?id=@{id}" -onclick "return check(0,'delete')" { t "Delete" }
		    tpl -if @{shared_p} {
			t " - "
			a -href "http://www.phigita.net/~@{screen_name}/wiki/@{id}" {
			    t "Jump to Public View"
			}
		    }

		    p

		    b { t "Sharing: " }
		    tpl -if @{shared_p} {
			t "Everyone (public)"
		    }
		    tpl -else "" {
			t "Only Me (Private)"
		    } 
		    t " - "
		    a -href "page-ac-set?id=@{id}&shared_p=@{ac_inverse_shared_p}&return_url=@{id}" -onClick "return check(0,'@{ac_toggle_msg}')" {
			tpl -if @{shared_p} {
			    t "Only Me (Private)"
			}
			tpl -else "" {
			    t "Everyone (public)"
			}
		    }
		    p
		}
	    }

	    # wiki page
	    tpl -with pagedata {
		h3 { t @{title} }
		p
		t @{content_in_html:noquote}
		p
		small {
		    t "page created "
		    t "@{pretty_creation_date} @{pretty_creation_time}"

		    t "last updated "
		    t "@{pretty_last_update_date} @{pretty_last_update_time}"
		    p
		}
	    }

	}
	layout_col -class span3 {
	    # nearby wiki pages
	    h3 {
		t "Nearby"
	    }
	    tpl -if { @{next_page} ne {} } {
		tpl -with next_page {
		    a -href @{id} {
			nt "&laquo; newer"
		    }
		    t " | "
		}
	    }
	    a -href "./" {
		t "up"
	    }
	    tpl -if { @{prev_page} ne {} } {
		tpl -with prev_page {
		    t " | "
		    a -href @{id} {
			nt "older &raquo;"
		    }
		}
	    }
	    p
	    tpl -for next_wikidata {
		nt "&#183;&nbsp;"
		small {
		    a -href @{id} {
			t @{title}
		    }
		}
		br
	    }
	    tpl -with pagedata {
		small {
		    tpl -if {@{title} ne {} } {
			t @{title}
		    }
		    tpl -else "" {
			font -color "red" {
			    t "Untitled: This Entry"
			}
		    }
		}
	    }
	    br
	    tpl -for prev_wikidata {
		nt "&#183;&nbsp;"
		small {
		    a -href @{id} {
			t @{title}
		    }
		}
		br
	    }
	}
    }
}



return

::xo::structured_text::init_css 

ad_page_contract {

    @author Neophytos Demetriou

} {
    page_id:integer,notnull
    {revision_id:integer,notnull,optional ""}
    {debug_p:boolean "f"}
}



set ctx_uid [ad_conn user_id]
set screen_name [db_string get_screen_name "select screen_name from users where user_id=:ctx_uid"]
set nickname $screen_name


set pathexp [list "User [ad_conn user_id]"]

set data [::db::Set new \
	      -pathexp ${pathexp} \
	      -select {r.title r.content p.live_revision_id p.shared_p} \
	      -type [::db::Inner_Join new \
			 -lhs [::db::Set new -alias r -pathexp $pathexp -type ::wiki::Page_Revision] \
			 -rhs [::db::Set new -alias p -pathexp $pathexp -type ::wiki::Page] \
			 -join_condition {p.id=r.page_id}] \
	      -where [list "p.id=[ns_dbquotevalue ${page_id}]"]]

if { $revision_id ne {} } {
    $data lappend where "r.id=[ns_dbquotevalue $revision_id]"
} else {
    $data lappend where "r.id=p.live_revision_id"
}
$data load
ns_log notice "sql=[$data set sql]"

if { [$data emptyset_p] } {
    rp_returnnotfound
    return
}
set o [$data head]

if { $revision_id ne {} && $revision_id ne [$o set live_revision_id] } {
    set is_live_revision false
} else {
    set is_live_revision true
}

# -docStyleId doc2
tmpl::master -title [${o} set title] -context_bar [ad_context_bar "One Page"] -onload "" {
    div -style "width:340px;float:right;" {
	div -style "font-size:120%;font-weight:bold;text-align:right;" {
	    a -class "fl" -href "page-edit?page_id=${page_id}" {
		t "Edit Page"
	    }
	    t " | "
	    a -class "fl" -href "page-revisions?page_id=${page_id}" {
		t "Revisions"
	    }
	    if { [${o} set shared_p] } {
		t " | "
		a -class "fl" -href "http://www.phigita.net/~${screen_name}/wiki/${page_id}" {
		    t "Jump to Public View"
		    if { !$is_live_revision } {
			t " (diff)"
		    }
		}
	    }
	}
	rp_form_put live_revision_id [$o set live_revision_id]
	#::xo::ns::include [acs_root_dir]/packages/wiki/tmpl-pvt/includelet-changelog.tcl
    }

    if { !$is_live_revision } {
	p
	div -style "color:red;font-weight:bold;" {
	    t "(this is not the live revision)"
	}
	div {
	    a -class "fl" -href "${page_id}?revision_id=[$o set live_revision_id]" {
		t "goto live revision"
	    }
	}
    }
    h1 {
	t [${o} set title]
    }



    if { ${debug_p} } {
	code {
	   nt [regsub -all {\n} [${o} set content] {x}]
	}
    } else {
	#set root [User set id]-[ad_conn ctx_uid]
	set content_root [User set id]-[ad_conn user_id]
	array set config [list root ${content_root} container_object_id $page_id image_prefix "/~${nickname}/blog/image/"]
	set content [${o} set content]
	::xo::structured_text::stx_to_html config content html
	nt $html
    }


}
