set title "Remarks @{subtitle}"
set description ""
set keywords ""

set base http://remarks.phigita.net

set num_of_links 10
set num_of_links_plus_one [expr { $num_of_links + 1 }]

val -id num_of_links "return $num_of_links"
val -id num_of_links_plus_one "return $num_of_links_plus_one"

val -id offset { ::xo::kit::queryget offset 0 "integer" }
val -id url_host { string trim [::xo::kit::queryget url_host ""] }

val -id prev_url { 
    set offset [expr { @{offset} - @{num_of_links} }]
    if { $offset <= 0 } { set offset "" }
    export_vars -url -base "." -no_empty offset  
}

val -id next_url { 
    set offset [expr { @{offset} + @{num_of_links} }]
    export_vars -url -base "." -no_empty offset 
}

val -id registered_p { ::xo::kit::is_registered_p }
val -id where_clause {
    set where_clause [list "cnt_shared > 0"]
    if { @{url_host} ne {} } {
	set url_host_sha1 [ns_sha1 @{url_host}]
	lappend where_clause "url_host_sha1=[ns_dbquotevalue ${url_host_sha1}]"
    }
    join $where_clause " AND "
}

val -id subtitle { 
    if { @{url_host} ne {} } {
	return "from @{url_host}"
    }
    return
}

datastore \
    -id linkdata \
    -select {
	bm.url
	bm.url_sha1
	bm.title
	bm.description
	bm.video_p
	bm.preview_p
	bm.last_update
	bm.cnt_comment
	bm.last_comment
	bm.extra
	{first_names || ' ' || cc.last_name as full_name}
	{cc.screen_name}
	{cc.user_id}
    } -from_class [db::Inner_Join new \
		       -lhs [::db::Set new -type ::sw::agg::Url \
				 -alias bm \
				 -where @{where_clause} \
				 -order {max_sharing_start_date desc} \
				 -offset @{offset} \
				 -limit @{num_of_links_plus_one}] \
		       -rhs [::db::Set new \
				 -select "status user_id first_names last_name screen_name" \
				 -from "users u inner join persons p on (u.user_id=p.person_id)" \
				 -alias cc] \
		       -join_condition {cc.user_id = bm.max_sharing_user_id}] \
    -order {max_sharing_start_date desc} \
    -extend {
	set description [::xo::structured_text::minitext_to_html $description]
	set age_pretty [::util::age_pretty -timestamp_ansi $last_update -sysdate_ansi [dt_systime]]

	if { $cnt_comment != 0 } {
	    set comment_screen_name [dict get $last_comment screen_name]
	    set commentContent [::xo::structured_text::minitext_to_html [dict get $last_comment content]]
	}

	if { $preview_p  } {
	    set jsImgArr [::bm::getJSImageArray [dict get $extra preview]]
	    set rownum [incr bm_counter]
	} else {
	    set jsImgArr \[\]
	}

	array set uri [::uri::split $url]
	set domain [::util::domain_from_host $uri(host)]
	set host $uri(host)

	if { $video_p } {
	    if { [catch {
		set video_id [dict get $extra video_id]
		set href http://video.phigita.net/${video_id}
	    } errMsg] } {
		set video_p 0
		ns_log notice "includelet-recent-shared-links: video_p check, possibly missing video_id in extra: errMsg=$errMsg"
	    }
	}
    }

val -id rowcount { llength @{linkdata} }

guard -id check_host_vuh {

    set vuh_p [::xo::kit::queryget vuh_p "0" "boolean"]
    if { $vuh_p && @{rowcount} == 0 } {
	rp_returnnotfound
	return false
    }

    return true
}

set limitComments 5
datastore \
    -id commentdata \
    -from_class [::db::Inner_Join new \
		     -lhs [::db::Set new \
			       -alias c \
			       -select {
				   ancestor 
				   {max(creation_date) as max_creation_date}
			       } \
			       -type ::bm::Bookmark_Comment \
			       -group "ancestor" \
			       -order "max_creation_date desc" \
			       -limit $limitComments] \
		     -rhs [::db::Set new -alias u -type ::sw::agg::Url] \
		     -join_condition "u.url_sha1=c.ancestor"] \
    -order "last_comment_date desc" \
    -limit $limitComments \
    -extend {
	set commentContent [::xo::structured_text::minitext_to_html [dict get $last_comment content]]
	set screen_name [dict get $last_comment screen_name]
    }



js -deps {
   kernel/lib/base.js
} {
    function bmTP(el,id,imgArr){
	var pn = el.parentNode;
	if (!pn.render) {
	    var prEl = document.createElement('div');
	    prEl.id = id;
	    pn.insertBefore(prEl,el.nextSibling);
	    for(var i=0;i<imgArr.length;i++) 
	    {
	     var imgEl   = document.createElement('img');
	     imgEl.src   ='http://img.phigita.net/'+imgArr[i]['s'];
	     imgEl.width =imgArr[i]['w'];
	     imgEl.height=imgArr[i]['h'];
	     var divEl   = document.createElement('div');
	     divEl.setAttribute('class','bm_img');
	     prEl.appendChild(divEl);
	     divEl.appendChild(imgEl);
	 }
	    pn.render=1;
	} else {
	    var prEl = $(id);
	}
	if (prEl.style.display != 'block') {
	    prEl.style.display = 'block';
	} else {
	    prEl.style.display = 'none';
	}
    }
    window['bmTP']=bmTP;
}



css {

    .host_tag {color: #060;}

    .bm_details small {
	display: block;
	line-height: 20px;
	color: #999999;
    }

    .bm_details small a { color: #666; }
    .bm_details small:before {
	content: '-- ';
    }

    .bm_comment {
	margin: 0 0 10px 20px;
	padding: 0 0 0 10px;
	border-left: 1px dashed #aaa;
    }

    .bm_comment small {
	display: block;
	line-height: 20px;
	color: #999999;
    }

    .bm_comment small a { color: #666; }

    .bm_preview {
	display:inline-block;
	background:url(/graphics/bg_preview.png);
	width:10px;
	height:10px;
	margin:0 3px;
	cursor:pointer;
    }
    .bm_header {
	background:#f2dee5;padding:2px 0px;height:1.5em;
	color:#865A69;
    }
    .bm_header strong {
	font-size: 16px;
	margin-left:5px;
    }
    .bm_action {
	width:40px;
    }
    #bm_discussion blockquote a { color: #666; }
}

#css -src "/www/resources/bootstrap/css/phigita.bootstrap.css"


master -title ${title} -description $description -keywords $keywords {

    layout_row {
	layout_col -class span2 {
	    b { t "Send Feedback:" }
	    br
	    img -src /graphics/53dab96f0fd8087a4110eb0174b4cfbb.png
	    p
	    div -style "margin:17px;" {
		#::xo::google::adsense::slot 5419027028 125 125
	    }
	    p
	    #::xo::google::adsense::slot 4077266081 160 600
	}
	layout_col -class span6 {

	    div -id remark {

		# title is set for Internet Explorer 
		# (uses "remark" as title for the link instead of "post-it")
		a -class "btn btn-default btn-mini bm_action" -href [::bm::bookmarklet_href] -title "reMark" -style "float:right;" {
		    t "reMark"
		}
		div -class "bm_header" {
		    strong { t "reMark" }
		    t " "
		    sup { t "human judgment first" }
		}
		tpl -if "@{url_host} ne {}" {
		    nt "from <a href=\"http://@{url_host}/\" style=\"color:green;\">http://@{url_host}/</a>"
		    t " \["
		    a -href ${base} { t "clear" }
		    t "\]"
		}

		tpl -for "linkdata" {
		    dl {
			dt {
			    a -href "@{url}" -target _blank {
				t "@{title}"
			    }
			    tpl -if { @{video_p} } {
				a -href "@{href}" -style "text-decoration:none;border:0;" {
				    img -src "//www.phigita.net/graphics/icon_video.gif" -width 19 -height 12 -alt {video}
				}
			    }
			    tpl -if { @{preview_p} } {
				div -class "bm_preview" -onclick "bmTP(this,'bm_pr_{rownum}',@{jsImgArr});"
			    }
			}
			dd {
			    tpl -if { @{description} ne {} } {
				div -class bm_remark {
				    nt "@{description:noquote}"
				}
			    }
			    div -class "bm_details" {
				small {
				    span -class user {
					a -href "/~@{screen_name}/" -title "@{full_name}" {
					    t "@{screen_name}"
					}
				    }
				    nt " &#183; "
				    a -class "permalink" -href "${base}/url/@{url_sha1}" {
					t "@{age_pretty}"
				    }
				    nt " &#183; "
				    a -class "host_tag" -href "${base}/host/@{host}" {
					t "#@{domain}"
				    }
				    tpl -if @{val.registered_p} {
					nt " &#183; "
					span {
					    a -href "${base}/url/@{url_sha1}" {
						t "comment"
					    }
					}
				    }
				}
			    }
			    tpl -if @{cnt_comment} {
				div -class "bm_comment" {
				    small {
					a -href "http://remarks.phigita.net/url/@{url_sha1}" {
					    t @{cnt_comment}
					    t " "
					    tpl -if "@{cnt_comment} == 1" { t "comment" }
					    tpl -if "@{cnt_comment} > 1" { t "comments" }
					}
					tpl -if { @{cnt_comment} == 1 } { t " by " }
					tpl -if { @{cnt_comment} > 1 } { t ", last by " }
					span -class user {
					    a -href "/~@{comment_screen_name}/" { t @{comment_screen_name} }
					    t ": "
					}
				    }
				    div {
					t @{commentContent:noquote}
				    }
				}
			    }
			}
		    }
		}
	    }
	}
	layout_col -class span4 {
	    div {
		div -style "float:left;background:#ccc;padding:2px;" {
		    tpl -if "@{offset} > 0" {
			a -href "@{prev_url}" { nt "&laquo; Newer" }
		    }
		    tpl -if "@{offset} > 0 && @{rowcount} == ${num_of_links_plus_one}" {
			t " | "
		    }
		    tpl -if "@{rowcount} == ${num_of_links_plus_one}" {
			a -href "@{next_url}" { nt "Older &raquo;" }
		    }
		}
	    }
	    i -class "clearfix"

	    hr
	    b { t "What is a reMark?" }
	    p
	    t {A remark is a statement that expresses a personal opinion or belief, explicit notice, or comment. In this context it refers to a bookmark that is shared with others. }
	    hr
	    b { t "What is social bookmarking?" }
	    p
	    t {Social bookmarking is an activity performed over a computer network that allows users to save and categorize a personal collection of bookmarks and share them with others.}

	    tpl -if @{registered_p} {
		hr
		a -class "btn btn-link btn-mini" -href "http://my.phigita.net/bookmarks/" {
		    t "Your Bookmarks"
		}
		t " "
		a -class "btn btn-link btn-mini" -href "http://my.phigita.net/bookmarks/bookmark-howto" {
		    t "How To Bookmark"
		}
	    }

	    hr
	    b { t "Discussion" }
	    p
	    div -id "bm_discussion" {

		tpl -for "commentdata" {
		    a -href @{url} { t @{title} }
		    blockquote {
			t @{commentContent:noquote}
			small {
			    a -href "url/@{url_sha1}" {
				t "@{cnt_comment} "
				tpl -if "@{cnt_comment} == 1" {
				    t "comment"
				}
				tpl -if "@{cnt_comment} > 1" {
				    t "comments"
				}
			    }
			    tpl -if "@{cnt_comment} > 1" {
				t ", last"
			    }
			    t " by "
			    a -href "//www.phigita.net/~@{screen_name}/" { t @{screen_name} }
			}

		    }
		}
	    }
	}
    }
}
