contract {

    pragma -id "noroot" -value "1"
    pragma -id "doctype" -value {<?xml version="1.0" encoding="UTF-8"?>}
    pragma -id "mime_type" -value "text/xml"

}

val -id context_user_id { return [ad_conn ctx_uid] }
val -id context_username { return [ad_conn context_username] }

datastore \
    -id userdata \
    -singleton true \
    -select {
	screen_name
	{first_names || ' ' || last_name as full_name}
    } \
    -from_class ::CC_Users \
    -where [list "user_id=:context_user_id"] \
    -limit 1


guard { return @{userdata:rowcount} }



datastore \
    -id blogdata \
    -scope context_user \
    -select {
	id
	title
	{substr(body,0,255) as description}
	{EXTRACT(EPOCH FROM date_trunc('second',entry_date)) as pubdate}
    } \
    -from_class ::Blog_Item \
    -where [list "shared_p"] \
    -order "entry_date desc" \
    -limit 10 \
    -extend {

	set pretty_date "[clock format ${pubdate} -format "%a, %d %b %Y %H:%M:%S"] GMT"

	set description [string map {\r { } \n { } :: {} * {} _ {} -- {}} ${description}]
	set description [string range ${description} 0 [expr [string wordstart ${description} end] - 1]]
	set description "[regsub -all -- {\s+} ${description} { }]\[...\]"
    }

namespace eval rss {
    dom createNodeCmd element rss
    dom createNodeCmd element channel
    dom createNodeCmd element item
    dom createNodeCmd element title
    dom createNodeCmd element link
    dom createNodeCmd element language
    dom createNodeCmd element docs
    dom createNodeCmd element description
    dom createNodeCmd element copyright
    dom createNodeCmd element pubDate
    dom createNodeCmd element webMaster
    dom createNodeCmd element guid
    dom createNodeCmd element image
    dom createNodeCmd element width
    dom createNodeCmd element height
    dom createNodeCmd element url
    dom createNodeCmd element description
}



val -id blog_url { return [ad_url]/~@{context_username}/blog/ }

#set stylepi [${docId} createProcessingInstruction "xml-stylesheet" "type=\"text/css\" href=\"http://www.phigita.net/css/rss.css\""]

dataview {
    rss::rss -version "2.0" {

	rss::channel {
	    rss::title { 
		t "@{userdata.full_name} (~@{context_username}) - Blog"
	    }
	    rss::description { t "" }
	    rss::link { 
		t @{blog_url}
	    }
	    rss::language {
		t el
	    }
	    rss::docs { t "This file is an RSS 2.0 file. It is intended to be viewed in a Newsreader or syndicated to another site." }
	    
	    tpl -for blogdata {
		rss::item {
		    rss::title {
			t @{title}
		    }
		    rss::link {
			t "@{val.blog_url}/@{id}"
		    }
		    rss::description {
			t @{description}
		    }
		    rss::pubDate {
			t @{pretty_date}
		    }
		    rss::guid -isPermaLink true {
			t @{val.blog_url}/@{id}
		    }
		}
	    }
	}
    }
}
